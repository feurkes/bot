# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
import telebot
from telebot import apihelper
import os
from dotenv import load_dotenv
import logging
import sys
import pytz
import time
from tg_utils.config import ADMIN_IDS, AUTHORIZED_TELEGRAM_IDS
from tg_utils.handlers import init_handlers
from tg_utils.db import init_db, ensure_accounts_columns, restore_rental_timers, DB_PATH
from tg_utils.logger import logger

# –í–∫–ª—é—á–∞–µ–º middleware
apihelper.ENABLE_MIDDLEWARE = True

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(name)s: %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
TG_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN") or os.getenv("TG_TOKEN")
if not TG_TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
bot = telebot.TeleBot(TG_TOKEN)

def is_user_authorized(user_id):
    return user_id in AUTHORIZED_TELEGRAM_IDS

def auth_required(func):
    def wrapper(*args, **kwargs):
        user_id = None
        if args and len(args) > 0:
            if hasattr(args[0], 'chat'):
                user_id = args[0].chat.id
            elif hasattr(args[0], 'message'):
                user_id = args[0].message.chat.id
        if user_id is None:
            return
        if not is_user_authorized(user_id):
            try:
                chat_id = user_id
                bot.send_message(chat_id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
                if hasattr(args[0], 'id'):
                    bot.answer_callback_query(args[0].id, "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
            except Exception:
                pass
            return
        return func(*args, **kwargs)
    return wrapper

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    ensure_accounts_columns()
    restore_rental_timers()
    logger.info("üßê –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–π–º–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    
    # FunPayListener
    try:
        from funpay_integration import FunPayListener
        fp_listener = FunPayListener()
        fp_listener.start()
        logger.info("O_O FunPayListener —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ —Å FunPay...")
    except Exception as e:
        logger.warning(f"üò≠ FunPay –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞: {e}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    init_handlers(bot, is_user_authorized, auth_required, admin_ids=ADMIN_IDS)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    while True:
        try:
            bot.polling(none_stop=True, interval=0)
            logger.warning("‚ò†Ô∏è Polling –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –±–µ–∑ –æ—à–∏–±–∫–∏. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            time.sleep(5)
            logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! ‚úÖ")
            
        except Exception as e:
            logger.error(f"‚ò†Ô∏èüè© –û—à–∏–±–∫–∞ –≤ polling: {e}")
            for admin_id in ADMIN_IDS:
                try:
                    error_message = f"‚ò†Ô∏è –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: {e}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
                    bot.send_message(admin_id, error_message)
                except Exception as send_e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {send_e}")
            logger.info("üòò –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            time.sleep(5)

if __name__ == "__main__":
    main()