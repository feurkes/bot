# --- Telegram Handlers ---
from tg_utils.keyboards import (
    main_menu, account_kb, game_selection_kb, rental_time_kb, 
    confirmation_kb, navigation_kb, stats_kb, settings_kb, 
    get_game_emoji, back_to_account_kb
)
from tg_utils.helpers import safe_edit_message_text
from tg_utils.state import user_states, user_acc_data, user_data
from tg_utils.db import DB_PATH
from tg_utils.logger import logger
from telebot import types
import sqlite3
import time
from datetime import datetime, timedelta
from game_name_mapper import mapper
from steam.steam_account_rental_utils import mark_account_rented, mark_account_free, auto_end_rent, send_account_to_buyer
from utils.email_utils import fetch_steam_guard_code_from_email
import os
import re
import threading
import asyncio
from steam.steam_logout import steam_logout_all_sessions
from tg_utils.config import ADMIN_IDS as CONFIG_ADMIN_IDS
from playwright.async_api import async_playwright
import string
import html
from dotenv import load_dotenv
from telebot import TeleBot

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TG_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN") or os.getenv("TG_TOKEN")

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ADMIN_IDS –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
from tg_utils.config import ADMIN_IDS

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = TeleBot(TG_TOKEN)

is_user_authorized = None
auth_required = None

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def parse_imap_host_port(imap_str):
    if ':' in imap_str:
        host, port = imap_str.rsplit(':', 1)
        try:
            port = int(port)
        except ValueError:
            port = None
        return host.strip(), port
    return imap_str.strip(), None

def finalize_add_account(message, user_id):
    if user_id not in user_acc_data:
        user_acc_data[user_id] = {}
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞", reply_markup=main_menu())
        user_states[user_id] = None
        return
    data = user_acc_data[user_id]
    required_fields = ["id", "login", "password", "game_name"]
    missing_fields = [field for field in required_fields if field not in data]
    if missing_fields:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {', '.join(missing_fields)}", reply_markup=main_menu())
        user_states[user_id] = None
        user_acc_data[user_id] = {}
        return
    try:
        from game_name_mapper import mapper
        normalized = mapper.normalize(data["game_name"])
        data["game_name"] = normalized
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute("INSERT OR REPLACE INTO accounts (id, login, password, game_name, rented_until, status, tg_user_id, email_login, email_password, imap_host) VALUES (?, ?, ?, ?, NULL, 'free', NULL, ?, ?, ?)",
                  (data["id"], data["login"], data["password"], data["game_name"], data.get("email_login"), data.get("email_password"), data.get("imap_host")))
        conn.commit()
        conn.close()
        bot.send_message(message.chat.id, f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç <b>{data['login']}</b> –¥–æ–±–∞–≤–ª–µ–Ω.", parse_mode="HTML", reply_markup=main_menu())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}", reply_markup=main_menu())
    user_states[user_id] = None
    user_acc_data[user_id] = {}

def send_steam_success_log(page, chat_id, login=None, password=None):
    try:
        if login and password:
            escaped_login = html.escape(login)
            escaped_password = html.escape(password)
            bot.send_message(chat_id, f"‚úÖ <b>–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ Steam!</b>\n\n–õ–æ–≥–∏–Ω: <code>{escaped_login}</code>\n–ü–∞—Ä–æ–ª—å: <code>{escaped_password}</code>", parse_mode="HTML")
        else:
            bot.send_message(chat_id, "‚úÖ <b>–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ Steam!</b>", parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∞: {e}")

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---
def init_handlers(bot_instance, is_user_authorized_func=None, auth_required_decorator=None, admin_ids=None):
    global bot, is_user_authorized, auth_required
    bot = bot_instance
    is_user_authorized = is_user_authorized_func
    auth_required = auth_required_decorator
    
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–¥–º–∏–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    if admin_ids:
        global ADMIN_IDS
        ADMIN_IDS = list(set(ADMIN_IDS + admin_ids))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞–º
    @bot.middleware_handler(update_types=['message', 'callback_query'])
    def error_handler(bot_instance, message):
        try:
            if message and hasattr(message, 'error'):
                error_text = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:\n\n{str(message.error)}"
                for admin_id in ADMIN_IDS:
                    try:
                        bot.send_message(admin_id, error_text)
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω—É {admin_id}: {str(e)}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—à–∏–±–æ–∫: {str(e)}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∞–º
    logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! ‚úÖ")
    for admin_id in ADMIN_IDS:
        try:
            bot.send_message(
                admin_id, 
                "ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!", 
                reply_markup=main_menu(),
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {str(e)}")

    # --- –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ---
    @bot.message_handler(commands=['start', 'menu'])
    def cmd_start(message):
        if is_user_authorized and is_user_authorized(message.chat.id):
            welcome_text = (
                "üöÄ <b>Steam Rental Bot v2.0</b>\n\n"
                "üí° <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—Ä–µ–Ω–¥–æ–π Steam –∞–∫–∫–∞—É–Ω—Ç–æ–≤!</b>\n\n"
                "üìã <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏</b> - –ø—Ä–æ—Å–º–æ—Ç—Ä, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
                "‚ûï <b>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç</b> - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ Steam –∞–∫–∫–∞—É–Ω—Ç–∞\n"
                "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</b> - –æ—Ç—á–µ—Ç—ã –ø–æ –∞—Ä–µ–Ω–¥–µ –∏ –¥–æ—Ö–æ–¥–∞–º\n"
                "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã</b> - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n"
                "üí¨ <b>–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞</b> - —Å–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n\n"
                "üî• –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:"
            )
            bot.send_message(message.chat.id, welcome_text, reply_markup=main_menu(), parse_mode="HTML")
        else:
            unauthorized_text = (
                "‚õî <b>–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</b>\n\n"
                "üîê –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å–∏—Å—Ç–µ–º—ã –∞—Ä–µ–Ω–¥—ã Steam –∞–∫–∫–∞—É–Ω—Ç–æ–≤.\n\n"
                "üìû –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            bot.send_message(message.chat.id, unauthorized_text, parse_mode="HTML")

    # --- –¢–ï–°–¢ –°–¢–ò–ú-–ê–ö–ö–ê–£–ù–¢–ê ---
    @bot.callback_query_handler(func=lambda c: c.data.startswith("test:"))
    def cb_test_account(call):
        bot.answer_callback_query(call.id)
        acc_id = call.data.split(":")[1]
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute("SELECT login, password, email_login, email_password, imap_host FROM accounts WHERE id=?", (acc_id,))
        row = c.fetchone()
        conn.close()
        if not row:
            bot.send_message(call.message.chat.id, "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        login, password, email_login, email_password, imap_host = row
        bot.send_message(call.message.chat.id, "üß™ –¢–µ—Å—Ç –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç—á—ë—Ç.")
        bot.send_message(call.message.chat.id, f"üß™ <b>–¢–µ—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ {acc_id}...</b>", parse_mode="HTML")

        def run_test():
            # --- –õ–û–ì–ò–ö–ê –¢–ï–°–¢–ê –ò–ó –°–¢–ê–†–û–ô –í–ï–†–°–ò–ò --- (–í–ö–õ–Æ–ß–ê–Ø PLAYWRIGHT)
            from playwright.sync_api import sync_playwright, TimeoutError as PWTimeoutError
            from utils.browser_config import get_browser_config
            import time
            import json
            import os
            from utils.email_utils import fetch_steam_guard_code_from_email # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ email_utils –¥–æ—Å—Ç—É–ø–µ–Ω

            SESSIONS_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), '..', 'sessions')
            os.makedirs(SESSIONS_DIR, exist_ok=True)
            session_file = os.path.join(SESSIONS_DIR, f"steam_{login}.json")
            browser = None
            context = None
            page = None
            try:
                bot.send_message(call.message.chat.id, "üß™ –û—Ç–∫—Ä—ã–≤–∞—é –±—Ä–∞—É–∑–µ—Ä –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É Steam...") # –î–æ–±–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –±—Ä–∞—É–∑–µ—Ä–∞
                browser_config = get_browser_config()
                with sync_playwright() as p:
                    browser = p.chromium.launch(**browser_config)
                    context = None
                    logged_in = False
                    
                    # --- –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é ---
                    if os.path.exists(session_file):
                        try:
                            context = browser.new_context(storage_state=session_file)
                            page = context.new_page()
                            page.goto("https://store.steampowered.com/account/")
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞, –æ–∂–∏–¥–∞—è —ç–ª–µ–º–µ–Ω—Ç –∞–∫–∫–∞—É–Ω—Ç–∞
                            page.wait_for_selector("#account_pulldown", timeout=10000) # –¢–∞–π–º–∞—É—Ç 10—Å
                            logged_in = True
                            bot.send_message(call.message.chat.id, "‚úÖ <b>–°–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞. –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!</b>", parse_mode="HTML")
                            send_steam_success_log(page, call.message.chat.id, login, password)
                            return # –£—Å–ø–µ—Ö —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç

                        except Exception as e:
                            # –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫—É –ª–æ–≥–∏–Ω–∞
                            logger.warning(f"[STEAM-TEST] –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–µ—Å—Å–∏—é –¥–ª—è {login}: {e}")
                            if context: context.close()
                            context = None
                            bot.send_message(call.message.chat.id, "‚ö†Ô∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞. –ü—Ä–æ–±—É—é –ø–æ–ª–Ω—ã–π –ª–æ–≥–∏–Ω.", parse_mode="HTML")

                    # --- –ü–æ–ª–Ω—ã–π –ª–æ–≥–∏–Ω, –µ—Å–ª–∏ —Å–µ—Å—Å–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞ ---
                    if context is None:
                        context = browser.new_context(
                            user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36",
                            viewport=None,
                            locale="ru-RU",
                            java_script_enabled=True,
                            ignore_https_errors=True
                        )
                        page = context.new_page()
                        page.goto("https://store.steampowered.com/login/")
                        page.wait_for_load_state("networkidle")
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ª–æ–≥–∏–Ω–∞
                        debug_png_path_step1 = os.path.join(SESSIONS_DIR, f"steam_login_step1_{login}.png")
                        page.screenshot(path=debug_png_path_step1)
                        bot.send_photo(call.message.chat.id, open(debug_png_path_step1, "rb"), caption=f"[{login}] –°–∫—Ä–∏–Ω—à–æ—Ç: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–≥–∏–Ω–∞ Steam")


                    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ª–æ–≥–∏–Ω–∞ –∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç–∞, –∏–Ω–∞—á–µ –æ—à–∏–±–∫–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
                    if "login" not in page.url and "account" not in page.url:
                        html = page.content()
                        debug_html_path = os.path.join(SESSIONS_DIR, f"steam_login_redirect_error_{login}.html")
                        with open(debug_html_path, "w", encoding="utf-8") as f: f.write(html)
                        debug_png_path = os.path.join(SESSIONS_DIR, f"steam_login_redirect_error_{login}.png")
                        page.screenshot(path=debug_png_path)
                        bot.send_message(call.message.chat.id, "‚ùå <b>Steam —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏—Ç –Ω–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞ –∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç–∞. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å IP –∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–º. –°–∫—Ä–∏–Ω—à–æ—Ç –∏ HTML —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.</b>", parse_mode="HTML")
                        bot.send_photo(call.message.chat.id, open(debug_png_path, "rb"), caption=f"[{login}] –°–∫—Ä–∏–Ω—à–æ—Ç —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞")
                        bot.send_document(call.message.chat.id, open(debug_html_path, "rb"), caption=f"[{login}] HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞")
                        return # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    
                    # –ï—Å–ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ª–æ–≥–∏–Ω–∞, –≤–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ
                    if "login" in page.url:
                        bot.send_message(call.message.chat.id, "üß™ –ñ–¥—É –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—è –ª–æ–≥–∏–Ω–∞...") # –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        try:
                            # –û–∂–∏–¥–∞–µ–º –ø–æ–ª–µ –ª–æ–≥–∏–Ω–∞ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
                            page.wait_for_selector('input[type="text"]', timeout=30000) # –¢–∞–π–º–∞—É—Ç 30—Å
                        except PWTimeoutError:
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–ª—è –ª–æ–≥–∏–Ω–∞
                            html = page.content()
                            debug_html_path = os.path.join(SESSIONS_DIR, f"steam_login_timeout_field_{login}.html")
                            with open(debug_html_path, "w", encoding="utf-8") as f: f.write(html)
                            debug_png_path = os.path.join(SESSIONS_DIR, f"steam_login_timeout_field_{login}.png")
                            page.screenshot(path=debug_png_path)
                            bot.send_message(call.message.chat.id, "‚ùå <b>–ü–æ–ª–µ –ª–æ–≥–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∑–∞ 30 —Å–µ–∫—É–Ω–¥. Steam –º–æ–≥ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –∏–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å. HTML –∏ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.</b>", parse_mode="HTML")
                            bot.send_photo(call.message.chat.id, open(debug_png_path, "rb"), caption=f"[{login}] –ü–æ–ª–µ –ª–æ–≥–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                            bot.send_document(call.message.chat.id, open(debug_html_path, "rb"), caption=f"[{login}] HTML –æ—à–∏–±–∫–∏ –ø–æ–ª—è –ª–æ–≥–∏–Ω–∞")
                            return # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
                            
                        bot.send_message(call.message.chat.id, "üß™ –ü–æ–ª–µ –Ω–∞–π–¥–µ–Ω–æ! –í–≤–æ–∂—É –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å...") # –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        page.fill('input[type="text"]', login)
                        page.fill('input[type="password"]', password)
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
                        debug_png_path_step2 = os.path.join(SESSIONS_DIR, f"steam_login_step2_{login}.png")
                        page.screenshot(path=debug_png_path_step2)
                        bot.send_photo(call.message.chat.id, open(debug_png_path_step2, "rb"), caption=f"[{login}] –°–∫—Ä–∏–Ω—à–æ—Ç: –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –≤–≤–µ–¥–µ–Ω—ã")
                        
                        page.click("button[type='submit']")
                        
                        try:
                            # –û–∂–∏–¥–∞–µ–º –ª–∏–±–æ Steam Guard, –ª–∏–±–æ —É—Å–ø–µ—Ö, –ª–∏–±–æ –æ—à–∏–±–∫—É –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –ª–æ–≥/–ø–∞—Å—Å
                            # –£–≤–µ–ª–∏—á–∏–º —Ç–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Steam
                            page.wait_for_selector("#auth_buttonset_entercode, input[maxlength='1'], #account_pulldown, .newlogindialog_FormError", timeout=30000) # –¢–∞–π–º–∞—É—Ç 30—Å
                        except PWTimeoutError:
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∏ HTML –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –ª–æ–≥/–ø–∞—Å—Å
                            bot.send_message(call.message.chat.id, "‚ùå <b>–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Steam –∏—Å—Ç–µ–∫–ª–æ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞/–ø–∞—Ä–æ–ª—è (30 —Å–µ–∫—É–Ω–¥).</b>", parse_mode="HTML")
                            debug_png_path = os.path.join(SESSIONS_DIR, f"steam_login_fail_timeout_logpass_{login}.png")
                            page.screenshot(path=debug_png_path)
                            debug_html_path = os.path.join(SESSIONS_DIR, f"steam_login_fail_timeout_logpass_{login}.html")
                            with open(debug_html_path, "w", encoding="utf-8") as f: f.write(page.content())
                            bot.send_photo(call.message.chat.id, open(debug_png_path, "rb"), caption=f"[{login}] –¢–∞–π–º–∞—É—Ç –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –ª–æ–≥/–ø–∞—Å—Å")
                            bot.send_document(call.message.chat.id, open(debug_html_path, "rb"), caption=f"[{login}] HTML —Ç–∞–π–º–∞—É—Ç–∞")
                            return # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –ª–æ–≥/–ø–∞—Å—Å
                        need_guard = False
                        if page.query_selector("#auth_buttonset_entercode"): need_guard = True
                        elif page.query_selector("input[maxlength='1']"): need_guard = True
                        elif "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å" in page.content(): need_guard = True # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ

                        if need_guard:
                            bot.send_message(call.message.chat.id, "‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–æ–¥ Steam Guard –∫–æ–¥–∞.", parse_mode="HTML") # –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            if not (email_login and email_password and imap_host):
                                bot.send_message(call.message.chat.id, f"‚ùå <b>–î–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ ({login}) —Ç—Ä–µ–±—É–µ—Ç—Å—è Steam Guard, –Ω–æ –¥–∞–Ω–Ω—ã–µ –ø–æ—á—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!</b>", parse_mode="HTML")
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ HTML –ø—Ä–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–∏ Guard –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ—á—Ç—ã
                                debug_png_path = os.path.join(SESSIONS_DIR, f"steam_guard_required_no_mail_{login}.png")
                                page.screenshot(path=debug_png_path)
                                debug_html_path = os.path.join(SESSIONS_DIR, f"steam_guard_required_no_mail_{login}.html")
                                with open(debug_html_path, "w", encoding="utf-8") as f: f.write(page.content())
                                bot.send_photo(call.message.chat.id, open(debug_png_path, "rb"), caption=f"[{login}] –¢—Ä–µ–±—É–µ—Ç—Å—è Guard, –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ—á—Ç—ã")
                                bot.send_document(call.message.chat.id, open(debug_html_path, "rb"), caption=f"[{login}] HTML Guard –±–µ–∑ –ø–æ—á—Ç—ã")
                                return # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ

                            bot.send_message(call.message.chat.id, "üß™ –ü–æ–ª—É—á–∞—é –∫–æ–¥ Steam Guard —Å –ø–æ—á—Ç—ã...", parse_mode="HTML")
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã Steam Guard
                            debug_png_path_step3 = os.path.join(SESSIONS_DIR, f"steam_login_step3_guard_page_{login}.png")
                            page.screenshot(path=debug_png_path_step3)
                            bot.send_photo(call.message.chat.id, open(debug_png_path_step3, "rb"), caption=f"[{login}] –°–∫—Ä–∏–Ω—à–æ—Ç: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ Steam Guard")

                            # --- –ü–û–õ–£–ß–ï–ù–ò–ï –ö–û–î–ê GUARD –° –ü–û–ß–¢–´ ---
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º fetch_steam_guard_code_from_email —Å —Ç–∞–π–º–∞—É—Ç–æ–º –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                            import time
                            code = None
                            start_time = time.time()
                            # –£–≤–µ–ª–∏—á–∏–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –ø–æ –ø–æ—á—Ç–µ –¥–æ 120 —Å–µ–∫—É–Ω–¥
                            email_fetch_timeout = 120 # –£–≤–µ–ª–∏—á–∏–ª —Ç–∞–π–º–∞—É—Ç –¥–æ 120 —Å–µ–∫—É–Ω–¥
                            bot.send_message(call.message.chat.id, f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ Steam Guard –∫–æ–¥–∞ —Å –ø–æ—á—Ç—ã {email_login} (–¥–æ {email_fetch_timeout} —Å–µ–∫—É–Ω–¥). –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ IMAP —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –±–æ—Ç –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –ø–æ—á—Ç–µ.", parse_mode="HTML") # –£—Ç–æ—á–Ω–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ

                            while (time.time() - start_time) < email_fetch_timeout: # –û–∂–∏–¥–∞–µ–º –¥–æ email_fetch_timeout —Å–µ–∫—É–Ω–¥
                                try:
                                    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ parse_imap_host_port –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–µ—Ç host –∏ port
                                    imap_host_clean, imap_port_clean = parse_imap_host_port(imap_host)

                                    # –£–≤–µ–ª–∏—á–∏–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –ø–æ –ø–æ—á—Ç–µ –¥–æ 10 —Å–µ–∫—É–Ω–¥
                                    code = fetch_steam_guard_code_from_email(email_login, email_password, imap_host_clean, imap_port_clean, logger=logger, mode='login') # –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç –Ω–∞ –∫–∞–∂–¥—É—é –ø–æ–ø—ã—Ç–∫—É
                                    if code: break
                                except Exception as email_ex:
                                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–¥–∞ Steam Guard —Å –ø–æ—á—Ç—ã: {email_ex}")
                                time.sleep(4) # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ —É–≤–µ–ª–∏—á–µ–Ω–∞ –¥–æ 4 —Å–µ–∫—É–Ω–¥

                            if not code:
                                bot.send_message(call.message.chat.id, f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ Steam Guard —Å –ø–æ—á—Ç—ã {email_login} –∑–∞ {email_fetch_timeout} —Å–µ–∫—É–Ω–¥! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å –ø–æ—á—Ç—ã, IMAP —Å–µ—Ä–≤–µ—Ä –∏ –¥–æ—Å—Ç—É–ø –±–æ—Ç–∞ –∫ –ø–æ—á—Ç–µ.</b>", parse_mode="HTML") # –£—Ç–æ—á–Ω–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ HTML –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞
                                debug_png_path = os.path.join(SESSIONS_DIR, f"steam_guard_fetch_fail_{login}.png")
                                page.screenshot(path=debug_png_path)
                                debug_html_path = os.path.join(SESSIONS_DIR, f"steam_guard_fetch_fail_{login}.html")
                                with open(debug_html_path, "w", encoding="utf-8") as f: f.write(page.content())
                                bot.send_photo(call.message.chat.id, open(debug_png_path, "rb"), caption=f"[{login}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Guard")
                                bot.send_document(call.message.chat.id, open(debug_html_path, "rb"), caption=f"[{login}] HTML –ø—Ä–∏ –æ—à–∏–±–∫–µ Guard")
                                return # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ

                            bot.send_message(call.message.chat.id, f"üß™ –í–≤–æ–∂—É –∫–æ–¥ Steam Guard: <code>{code}</code>", parse_mode="HTML")

                            # --- –í–í–û–î –ö–û–î–ê GUARD ---
                            # –í–≤–æ–¥ –∫–æ–¥–∞ Guard (–ª–æ–≥–∏–∫–∞ –∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)
                            if page.query_selector("input[maxlength='1']"):
                                inputs = page.query_selector_all("input[maxlength='1']")
                                if len(inputs) == len(code): # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª–µ–π –∏ –¥–ª–∏–Ω—ã –∫–æ–¥–∞
                                    for i, ch in enumerate(code):
                                        inputs[i].fill(ch)
                                    time.sleep(1) # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞
                                else:
                                    bot.send_message(call.message.chat.id, "‚ùå <b>–û—à–∏–±–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π –¥–ª—è –∫–æ–¥–∞ Steam Guard –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É.</b>", parse_mode="HTML")
                                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ HTML –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ Guard
                                    debug_png_path = os.path.join(SESSIONS_DIR, f"steam_guard_input_fail_fields_{login}.png")
                                    page.screenshot(path=debug_png_path)
                                    debug_html_path = os.path.join(SESSIONS_DIR, f"steam_guard_input_fail_fields_{login}.html")
                                    with open(debug_html_path, "w", encoding="utf-8") as f: f.write(page.content())
                                    bot.send_photo(call.message.chat.id, open(debug_png_path, "rb"), caption=f"[{login}] –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ Guard")
                                    bot.send_document(call.message.chat.id, open(debug_html_path, "rb"), caption=f"[{login}] HTML –æ—à–∏–±–∫–∏ –≤–≤–æ–¥–∞ Guard")
                                    return # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ

                            elif page.query_selector("input[name='authcode']"):
                                page.fill("input[name='authcode']", code)
                                time.sleep(1) # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞
                            else:
                                bot.send_message(call.message.chat.id, "‚ùå <b>–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞ Steam Guard.</b>", parse_mode="HTML")
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ HTML –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø–æ–ª—è –≤–≤–æ–¥–∞ Guard
                                debug_png_path = os.path.join(SESSIONS_DIR, f"steam_guard_input_fail_field_missing_{login}.png")
                                page.screenshot(path=debug_png_path)
                                debug_html_path = os.path.join(SESSIONS_DIR, f"steam_guard_input_fail_field_missing_{login}.html")
                                with open(debug_html_path, "w", encoding="utf-8") as f: f.write(page.content())
                                bot.send_photo(call.message.chat.id, open(debug_png_path, "rb"), caption=f"[{login}] –ü–æ–ª–µ Guard –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                                bot.send_document(call.message.chat.id, open(debug_html_path, "rb"), caption=f"[{login}] HTML –æ—à–∏–±–∫–∏ –ø–æ–ª—è Guard")
                                return # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ

                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∫–æ–¥–∞
                            # debug_png_path_step4 = os.path.join(SESSIONS_DIR, f"steam_login_step4_code_entered_{login}.png")
                            # page.screenshot(path=debug_png_path_step4)
                            # bot.send_photo(call.message.chat.id, open(debug_png_path_step4, "rb"), caption=f"[{login}] –°–∫—Ä–∏–Ω—à–æ—Ç: –∫–æ–¥ Steam Guard –≤–≤–µ–¥—ë–Ω") # –û—Ç–ø—Ä–∞–≤–∫–∞

                            btn = page.query_selector("button[type='submit']")
                            if btn:
                                btn.click()
                                time.sleep(3) # –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞ –¥–æ 3 —Å–µ–∫—É–Ω–¥

                            try:
                                # –û–∂–∏–¥–∞–µ–º –ª–∏–±–æ —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥, –ª–∏–±–æ –æ—à–∏–±–∫—É –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ Guard
                                # –£–≤–µ–ª–∏—á–∏–º —Ç–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–æ 25 —Å–µ–∫—É–Ω–¥
                                page.wait_for_selector("#account_pulldown, .newlogindialog_FormError", timeout=25000) # –¢–∞–π–º–∞—É—Ç 25—Å

                                if page.query_selector("#account_pulldown"):
                                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º storage_state (—Å–µ—Å—Å–∏—é) –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                                    try:
                                        context.storage_state(path=session_file)
                                        logger.info(f"[STEAM-SESSION] –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {session_file}")
                                    except Exception as ex:
                                        logger.warning(f"[STEAM-SESSION] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å storage_state: {ex}")

                                    bot.send_message(call.message.chat.id, "‚úÖ <b>–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ Steam Guard!</b>", parse_mode="HTML")
                                    send_steam_success_log(page, call.message.chat.id, login, password)
                                    return # –£—Å–ø–µ—Ö, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç

                                elif page.query_selector(".newlogindialog_FormError"):
                                    err = page.inner_text(".newlogindialog_FormError")
                                    bot.send_message(call.message.chat.id, f"‚ùå <b>–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ Steam Guard:</b> {err}", parse_mode="HTML")
                                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ HTML –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ Guard
                                    debug_png_path = os.path.join(SESSIONS_DIR, f"steam_guard_input_error_{login}.png")
                                    page.screenshot(path=debug_png_path)
                                    debug_html_path = os.path.join(SESSIONS_DIR, f"steam_guard_input_error_{login}.html")
                                    with open(debug_html_path, "w", encoding="utf-8") as f: f.write(page.content())
                                    bot.send_photo(call.message.chat.id, open(debug_png_path, "rb"), caption=f"[{login}] –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –ø–æ—Å–ª–µ Guard")
                                    bot.send_document(call.message.chat.id, open(debug_html_path, "rb"), caption=f"[{login}] HTML –æ—à–∏–±–∫–∏ –≤—Ö–æ–¥–∞ –ø–æ—Å–ª–µ Guard")
                                    return # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ

                            except PWTimeoutError:
                                bot.send_message(call.message.chat.id, "‚ùå <b>–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ Steam Guard –∏—Å—Ç–µ–∫–ª–æ (25 —Å–µ–∫—É–Ω–¥).</b>", parse_mode="HTML")
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∏ HTML –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ Guard
                                debug_png_path = os.path.join(SESSIONS_DIR, f"steam_guard_timeout_after_input_{login}.png")
                                page.screenshot(path=debug_png_path)
                                debug_html_path = os.path.join(SESSIONS_DIR, f"steam_guard_timeout_after_input_{login}.html")
                                with open(debug_html_path, "w", encoding="utf-8") as f: f.write(page.content())
                                bot.send_photo(call.message.chat.id, open(debug_png_path, "rb"), caption=f"[{login}] –¢–∞–π–º–∞—É—Ç –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ Guard")
                                bot.send_document(call.message.chat.id, open(debug_html_path, "rb"), caption=f"[{login}] HTML —Ç–∞–π–º–∞—É—Ç–∞ –ø–æ—Å–ª–µ Guard")
                                return # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ


                        # –ï—Å–ª–∏ Steam Guard –Ω–µ –Ω—É–∂–µ–Ω (–ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –ª–æ–≥/–ø–∞—Å—Å)
                        elif page.query_selector("#account_pulldown"):
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º storage_state (—Å–µ—Å—Å–∏—é) –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                            try:
                                context.storage_state(path=session_file)
                                logger.info(f"[STEAM-SESSION] –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {session_file}")
                            except Exception as ex:
                                logger.warning(f"[STEAM-SESSION] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å storage_state: {ex}")

                            bot.send_message(call.message.chat.id, "‚úÖ <b>–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω –±–µ–∑ Steam Guard!</b>", parse_mode="HTML")
                            send_steam_success_log(page, call.message.chat.id, login, password)
                            return # –£—Å–ø–µ—Ö, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç

                # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç —Ç–µ—Å—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ
                # –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏, –µ—Å–ª–∏ –±—ã–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥—ã –Ω–µ –Ω–∞ –æ–∂–∏–¥–∞–µ–º—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                bot.send_message(call.message.chat.id, "‚ùå <b>–¢–µ—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.</b>", parse_mode="HTML")

            except Exception as e:
                # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–≤–æ–¥ –æ—à–∏–±–∫–∏ –±–µ–∑ HTML-—Ç–µ–≥–æ–≤
                error_msg = str(e)
                # logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {acc_id}: {error_msg}", exc_info=True) # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
                bot.send_message(call.message.chat.id, f"‚ùå <b>–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞:</b> {error_msg}", parse_mode="HTML")

            finally:
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
                try:
                    if context:
                        context.close()
                except:
                    pass
                try:
                    if browser:
                        browser.close()
                except:
                    pass

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        import threading
        threading.Thread(target=run_test, daemon=True).start()

    # --- –û–ë–ù–û–í–õ–ï–ù–ò–ï –ú–ï–ù–Æ ---
    @bot.callback_query_handler(func=lambda c: c.data == "refresh_menu")
    @auth_required
    def cb_refresh(call):
        bot.answer_callback_query(call.id)
        bot.edit_message_text("üëæ <b>Steam Rental 1.0.3</b>\n–£–ø—Ä–∞–≤–ª—è–π –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –∏ –∞—Ä–µ–Ω–¥–æ–π!", 
                            call.message.chat.id, call.message.message_id, 
                            reply_markup=main_menu(), parse_mode="HTML")

    # --- –ù–ê–ó–ê–î –í –ú–ï–ù–Æ ---
    @bot.callback_query_handler(func=lambda c: c.data == "back_to_menu")
    @auth_required
    def cb_back(call):
        bot.answer_callback_query(call.id)
        bot.edit_message_text("üëæ <b>Steam Rental 1.0.3</b>\n–£–ø—Ä–∞–≤–ª—è–π –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –∏ –∞—Ä–µ–Ω–¥–æ–π!", 
                            call.message.chat.id, call.message.message_id, 
                            reply_markup=main_menu(), parse_mode="HTML")

    # --- –î–û–ë–ê–í–õ–ï–ù–ò–ï –ê–ö–ö–ê–£–ù–¢–ê ---
    @bot.callback_query_handler(func=lambda c: c.data == "add_acc")
    @auth_required
    def cb_add_acc(call):
        bot.answer_callback_query(call.id)
        user_id = call.from_user.id
        user_states[user_id] = "add_id"
        user_acc_data[user_id] = {}
        bot.edit_message_text("–í–≤–µ–¥–∏—Ç–µ ID –∞–∫–∫–∞—É–Ω—Ç–∞:", call.message.chat.id, call.message.message_id)

    @bot.message_handler(func=lambda m: user_states.get(m.from_user.id) == "add_id")
    @auth_required
    def add_id_step(message):
        user_id = message.from_user.id
        user_acc_data[user_id]["id"] = message.text.strip()
        user_states[user_id] = "add_login"
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω Steam:")

    @bot.message_handler(func=lambda m: user_states.get(m.from_user.id) == "add_login")
    @auth_required
    def add_login_step(message):
        user_id = message.from_user.id
        user_acc_data[user_id]["login"] = message.text.strip()
        user_states[user_id] = "add_password"
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å Steam:")

    @bot.message_handler(func=lambda m: user_states.get(m.from_user.id) == "add_password")
    @auth_required
    def add_password_step(message):
        user_id = message.from_user.id
        user_acc_data[user_id]["password"] = message.text.strip()
        user_states[user_id] = "add_game"
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã:")

    @bot.message_handler(func=lambda m: user_states.get(m.from_user.id) == "add_game")
    @auth_required
    def add_game_step(message):
        user_id = message.from_user.id
        user_acc_data[user_id]["game_name"] = message.text.strip()
        user_states[user_id] = "add_mail"
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –ø–æ—á—Ç—ã:")

    @bot.message_handler(func=lambda m: user_states.get(m.from_user.id) == "add_mail")
    @auth_required
    def add_mail_step(message):
        user_id = message.from_user.id
        if message.text.lower() != "–Ω–µ—Ç":
            user_acc_data[user_id]["email_login"] = message.text.strip()
            user_states[user_id] = "add_mail_pw"
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –ø–æ—á—Ç—ã:")
        else:
            finalize_add_account(message, user_id)

    @bot.message_handler(func=lambda m: user_states.get(m.from_user.id) == "add_mail_pw")
    @auth_required
    def add_mail_pw_step(message):
        user_id = message.from_user.id
        user_acc_data[user_id]["email_password"] = message.text.strip()
        user_states[user_id] = "add_mail_imap"
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ IMAP-—Å–µ—Ä–≤–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, imap.gmail.com –±–µ–∑ https):")

    @bot.message_handler(func=lambda m: user_states.get(m.from_user.id) == "add_mail_imap")
    @auth_required
    def add_mail_imap_step(message):
        user_id = message.from_user.id
        host, port = parse_imap_host_port(message.text.strip())
        user_acc_data[user_id]["imap_host"] = host
        if port:
            user_acc_data[user_id]["imap_port"] = port
        finalize_add_account(message, user_id)

    # --- –°–ü–ò–°–û–ö –ê–ö–ö–ê–£–ù–¢–û–í ---
    @bot.callback_query_handler(func=lambda c: c.data == "list_accs")
    @auth_required
    def cb_list_accs(call):
        bot.answer_callback_query(call.id)
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute("SELECT DISTINCT game_name, COUNT(*) FROM accounts GROUP BY game_name ORDER BY COUNT(*) DESC")
        games_data = c.fetchall()
        conn.close()
        
        if not games_data:
            no_games_text = (
                "üì≠ <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä</b>\n\n"
                "üéÆ –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å —Å–∏—Å—Ç–µ–º–æ–π –∞—Ä–µ–Ω–¥—ã.\n\n"
                "‚ûï –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç\" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."
            )
            kb = types.InlineKeyboardMarkup()
            kb.add(types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="add_acc"))
            kb.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
            safe_edit_message_text(bot, call.message.chat.id, call.message.message_id, 
                                   no_games_text, kb, parse_mode="HTML")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        games_list = [game for game, count in games_data]
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        games_text = "üéÆ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –ø–æ –∏–≥—Ä–∞–º</b>\n\n"
        games_text += "üìä <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>\n\n"
        
        for game, count in games_data:
            emoji = get_game_emoji(game)
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–≤–æ–±–æ–¥–Ω—ã–º –∞–∫–∫–∞—É–Ω—Ç–∞–º
            conn = sqlite3.connect(DB_PATH)
            c = conn.cursor()
            c.execute("SELECT COUNT(*) FROM accounts WHERE game_name=? AND status='free'", (game,))
            free_count = c.fetchone()[0]
            conn.close()
            
            status_text = f"({free_count}/{count} —Å–≤–æ–±–æ–¥–Ω–æ)"
            games_text += f"{emoji} <b>{game}</b> - {count} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ {status_text}\n"
        
        games_text += "\nüîç –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏:"
        
        safe_edit_message_text(bot, call.message.chat.id, call.message.message_id, 
                               games_text, game_selection_kb(games_list), parse_mode="HTML")

    @bot.callback_query_handler(func=lambda c: c.data.startswith("select_game:"))
    @auth_required
    def cb_select_game(call):
        logger.debug(f"[SELECT_GAME] Callback received: {call.data}")
        bot.answer_callback_query(call.id)
        try:
            game = call.data.split(":", 1)[1]
            logger.debug(f"[SELECT_GAME] Game selected: {game}")
            show_accounts_page(call.message, game, 0)
        except Exception as e:
            logger.error(f"[SELECT_GAME] Error handling select_game callback {call.data}: {e}")
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–∞–º", callback_data="list_accs"))
            markup.add(types.InlineKeyboardButton("üîÑ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu"))
            safe_edit_message_text(bot, call.message.chat.id, call.message.message_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏–≥—Ä—ã.", reply_markup=markup)

    @bot.callback_query_handler(func=lambda c: c.data.startswith("page:"))
    @auth_required
    def cb_page_accs(call):
        logger.debug(f"[PAGE_ACCS] Callback received: {call.data}")
        bot.answer_callback_query(call.id)
        try:
            parts = call.data.split(":")
            if len(parts) == 3:
                command, game, index_str = parts
                try:
                    index = int(index_str)
                    logger.debug(f"[PAGE_ACCS] Navigating to game={game}, index={index}")
                    show_accounts_page(call.message, game, index)
                except ValueError:
                    logger.error(f"[PAGE_ACCS] Invalid index in page callback data: {call.data}")
                    bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å")
            else:
                logger.error(f"[PAGE_ACCS] Invalid page callback data: {call.data}")
                bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
        except Exception as e:
            logger.error(f"[PAGE_ACCS] Error handling page_accs callback {call.data}: {e}")
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–∞–º", callback_data="list_accs"))
            markup.add(types.InlineKeyboardButton("üîÑ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu"))
            safe_edit_message_text(bot, call.message.chat.id, call.message.message_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.", reply_markup=markup)

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
    # –ü—Ä–∏–Ω–∏–º–∞–µ—Ç message (–∏–∑ call.message), –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –∏ –∏–Ω–¥–µ–∫—Å –ü–ï–†–í–û–ì–û –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    def show_accounts_page(message, game, start_index):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–≥—Ä—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        logger.debug(f"[SHOW_ACC_PAGE] Showing accounts for game={game}, starting index={start_index}")
        PAGE_SIZE = 7 # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        try:
            conn = sqlite3.connect(DB_PATH)
            c = conn.cursor()
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –∏–≥—Ä—ã, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ ID
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ–ª—É—á–∞–µ–º steam_guard_enabled
            c.execute("SELECT id, login, password, status, steam_guard_enabled, rented_until FROM accounts WHERE game_name=? ORDER BY id", (game,))
            all_accounts = c.fetchall()
            conn.close()

            total_accounts = len(all_accounts)
            logger.debug(f"[SHOW_ACC_PAGE] Found {total_accounts} total accounts for game {game}")

            if total_accounts == 0:
                logger.debug(f"[SHOW_ACC_PAGE] No accounts found for game {game}")
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–∞–º", callback_data="list_accs"))
                markup.add(types.InlineKeyboardButton("üîÑ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu"))
                safe_edit_message_text(bot, "–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã.", message.chat.id, message.message_id, reply_markup=markup)
                return

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            accounts_on_page = all_accounts[start_index : start_index + PAGE_SIZE]
            current_page_count = len(accounts_on_page)
            logger.debug(f"[SHOW_ACC_PAGE] Showing {current_page_count} accounts from index {start_index}")

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ê–∫–∫–∞—É–Ω—Ç—ã 1-7 –∏–∑ 25")
            end_index = start_index + current_page_count
            text = f"<b>üéÆ {game} ‚Äî –∞–∫–∫–∞—É–Ω—Ç—ã</b>\n"

            # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            markup = types.InlineKeyboardMarkup()
            for acc_id, login, password, status, steam_guard_enabled, rented_until_timestamp in accounts_on_page:
                status_text = 'üü¢ –°–≤–æ–±–æ–¥–µ–Ω' if status == 'free' else 'üî¥ –í –∞—Ä–µ–Ω–¥–µ'
                button_text = f"{acc_id} - {login} - {status_text}"

                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—Ä–µ–Ω–¥–µ, –µ—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –≤ –∞—Ä–µ–Ω–¥–µ
                if status == "rented" and rented_until_timestamp:
                    try:
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º timestamp –≤ datetime –æ–±—ä–µ–∫—Ç
                        rented_until_dt = datetime.fromtimestamp(rented_until_timestamp)
                        now = datetime.now()
                        remaining_time = rented_until_dt - now

                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (–ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞, –¥–ª—è –ú–°–ö –Ω—É–∂–Ω–∞ –¥–æ–ø. –±–∏–±–ª–∞)
                        end_time_str = rented_until_dt.strftime('%H:%M:%S %d.%m.%Y') # –§–æ—Ä–º–∞—Ç —Å –¥–∞—Ç–æ–π —Ç–æ–∂–µ

                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
                        total_seconds = int(remaining_time.total_seconds())
                        if total_seconds < 0:
                            remaining_str = "–í—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã –∏—Å—Ç–µ–∫–ª–æ"
                        else:
                            hours, remainder = divmod(total_seconds, 3600)
                            minutes, seconds = divmod(remainder, 60)
                            remaining_parts = []
                            if hours > 0: remaining_parts.append(f"{hours} —á.")
                            if minutes > 0: remaining_parts.append(f"{minutes} –º–∏–Ω.")
                            remaining_parts.append(f"{seconds} —Å–µ–∫.") # –°–µ–∫—É–Ω–¥—ã –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
                            remaining_str = ", ".join(remaining_parts)
                            if not remaining_str: remaining_str = "< 1 —Å–µ–∫."

                        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                        button_text += f" –¥–æ {end_time_str} (–æ—Å—Ç–∞–ª–æ—Å—å: {remaining_str})"

                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –∞—Ä–µ–Ω–¥—ã –≤ show_accounts_page: {e}")
                        button_text += " (–û—à–∏–±–∫–∞ –≤—Ä–µ–º–µ–Ω–∏)"

                # Callback Data –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
                markup.add(types.InlineKeyboardButton(button_text, callback_data=f"info:{acc_id}"))

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ü—Ä–µ–¥/–°–ª–µ–¥, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            nav_buttons = []
            # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥" –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            if start_index > 0:
                nav_buttons.append(types.InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥", callback_data=f"page:{game}:{start_index - PAGE_SIZE}"))
            # –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥" –µ—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            if start_index + PAGE_SIZE < total_accounts:
                nav_buttons.append(types.InlineKeyboardButton("–°–ª–µ–¥ ‚û°Ô∏è", callback_data=f"page:{game}:{start_index + PAGE_SIZE}"))

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            if nav_buttons:
                markup.row(*nav_buttons)

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∏–≥—Ä"
            markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–∞–º", callback_data="list_accs"))

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            safe_edit_message_text(bot, text, message.chat.id, message.message_id, reply_markup=markup, parse_mode='HTML')

        except Exception as e:
            logger.error(f"[SHOW_ACC_PAGE] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–∞–º", callback_data="list_accs"))
            markup.add(types.InlineKeyboardButton("üîÑ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu"))
            safe_edit_message_text(bot, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤.", message.chat.id, message.message_id, reply_markup=markup)

    # --- –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –ê–ö–ö–ê–£–ù–¢–ï ---
    @bot.callback_query_handler(func=lambda c: c.data.startswith("info:"))
    @auth_required
    def cb_info(call):
        bot.answer_callback_query(call.id)
        try:
            acc_id = call.data.split(":", 1)[1]
            conn = sqlite3.connect(DB_PATH)
            c = conn.cursor()
            c.execute("SELECT id, login, password, game_name, status, steam_guard_enabled, rented_until, email_login, email_password FROM accounts WHERE id=?", (acc_id,))
            row = c.fetchone()
            conn.close()

            if not row:
                bot.answer_callback_query(call.id, "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            acc_id, login, password, game_name, status, steam_guard_enabled, rented_until_timestamp, email_login, email_password = row

            status_text = "üü¢ –°–≤–æ–±–æ–¥–µ–Ω" if status == "free" else "üî¥ –í –∞—Ä–µ–Ω–¥–µ"
            text = f"<b>–ê–∫–∫–∞—É–Ω—Ç:</b> <code>{html.escape(login)}</code>\n"
            text += f"<b>–ü–∞—Ä–æ–ª—å:</b> <code>{html.escape(password)}</code>\n"
            text += f"<b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n"
            text += f"<b>–ò–≥—Ä–∞:</b> <code>{html.escape(game_name)}</code>"

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—á—Ç–µ
            if email_login:
                text += f"\n<b>–ü–æ—á—Ç–∞:</b> <code>{html.escape(email_login)}</code>"
            if email_password:
                text += f"\n<b>–ü–∞—Ä–æ–ª—å –æ—Ç –ø–æ—á—Ç—ã:</b> <code>{html.escape(email_password)}</code>"

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—Ä–µ–Ω–¥–µ, –µ—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –≤ –∞—Ä–µ–Ω–¥–µ
            if status == "rented" and rented_until_timestamp:
                try:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º timestamp –≤ datetime –æ–±—ä–µ–∫—Ç
                    rented_until_dt = datetime.fromtimestamp(rented_until_timestamp)
                    now = datetime.now()
                    remaining_time = rented_until_dt - now

                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (–ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞, –¥–ª—è –ú–°–ö –Ω—É–∂–Ω–∞ –¥–æ–ø. –±–∏–±–ª.)
                    end_time_str = rented_until_dt.strftime('%H:%M:%S %d.%m.%Y') # –§–æ—Ä–º–∞—Ç —Å –¥–∞—Ç–æ–π —Ç–æ–∂–µ

                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
                    total_seconds = int(remaining_time.total_seconds())
                    if total_seconds < 0:
                        remaining_str = "–í—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã –∏—Å—Ç–µ–∫–ª–æ"
                    else:
                        hours, remainder = divmod(total_seconds, 3600)
                        minutes, seconds = divmod(remainder, 60)
                        remaining_parts = []
                        if hours > 0: remaining_parts.append(f"{hours} —á.")
                        if minutes > 0: remaining_parts.append(f"{minutes} –º–∏–Ω.")
                        remaining_parts.append(f"{seconds} —Å–µ–∫.") # –°–µ–∫—É–Ω–¥—ã –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
                        remaining_str = ", ".join(remaining_parts)
                        if not remaining_str: remaining_str = "< 1 —Å–µ–∫."

                    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                    text += f"\n–ê—Ä–µ–Ω–¥–æ–≤–∞–Ω –¥–æ (–ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞): {html.escape(end_time_str)}"
                    text += f"\n–û—Å—Ç–∞–ª–æ—Å—å: {html.escape(remaining_str)}"

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –∞—Ä–µ–Ω–¥—ã: {e}")
                    text += "\n–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –≤—Ä–µ–º–µ–Ω–∏ –∞—Ä–µ–Ω–¥—ã."

            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üß™ –¢–µ—Å—Ç", callback_data=f"test:{acc_id}"))
            markup.add(types.InlineKeyboardButton("üìù –°–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data=f"chgdata:{acc_id}"))
            markup.add(types.InlineKeyboardButton("‚õîÔ∏è –§—É–ª–ª –≤—ã—Ö–æ–¥", callback_data=f"logout:{acc_id}"))

            logger.debug(f"[CB_INFO] game_name from DB: '{game_name}'")
            guard_button_text = "üü¢ –ò—Å–∫–∞—Ç—å –∫–æ–¥ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞" if steam_guard_enabled else "üî¥ –ù–µ –∏—Å–∫–∞—Ç—å –∫–æ–¥ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"
            toggle_guard_callback_data = f"toggle_guard:{acc_id}:{game_name}"
            markup.add(types.InlineKeyboardButton(guard_button_text, callback_data=toggle_guard_callback_data))

            if status == "free":
                markup.add(types.InlineKeyboardButton("üü¢ –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å", callback_data=f"rent:{acc_id}"))
                markup.add(types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"del:{acc_id}"))
            else:
                markup.add(types.InlineKeyboardButton("‚èπ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∞—Ä–µ–Ω–¥—É", callback_data=f"return:{acc_id}"))

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ö–æ–¥–∞"
            login_settings_callback = f"login_settings:{acc_id}"
            markup.add(types.InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ö–æ–¥–∞", callback_data=login_settings_callback))

            markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"select_game:{game_name}"))

            safe_edit_message_text(bot, text, call.message.chat.id, call.message.message_id, reply_markup=markup, parse_mode="HTML")

        except Exception as e:
            logger.error(f"[CB_INFO] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ {{call.data}}: {e}")
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_to_menu"))
            safe_edit_message_text(bot, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ.", call.message.chat.id, call.message.message_id, reply_markup=markup, parse_mode="HTML")

    # --- –ê–†–ï–ù–î–ê –ê–ö–ö–ê–£–ù–¢–ê (–í–´–ë–û–† –í–†–ï–ú–ï–ù–ò) ---
    @bot.callback_query_handler(func=lambda c: c.data.startswith("rent:"))
    @auth_required
    def cb_rent(call):
        bot.answer_callback_query(call.id)
        try:
            acc_id = call.data.split(":")[1]
            conn = sqlite3.connect(DB_PATH)
            c = conn.cursor()
            c.execute("SELECT * FROM accounts WHERE id=?", (acc_id,))
            acc = c.fetchone()
            conn.close()

            if not acc:
                bot.answer_callback_query(call.id)
                bot.send_message(call.message.chat.id, "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            if acc[5] != "free":
                bot.answer_callback_query(call.id)
                bot.send_message(call.message.chat.id, "‚ùå –ê–∫–∫–∞—É–Ω—Ç —É–∂–µ –≤ –∞—Ä–µ–Ω–¥–µ.")
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ –∞—Ä–µ–Ω–¥—ã
            text = f"‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ <code>{html.escape(acc[1])}</code>:"
            markup = types.InlineKeyboardMarkup()
            
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
            time_options = [
                ("1 —á–∞—Å", 1),
                ("3 —á–∞—Å–∞", 3),
                ("6 —á–∞—Å–æ–≤", 6),
                ("12 —á–∞—Å–æ–≤", 12),
                ("24 —á–∞—Å–∞", 24)
            ]
            
            for text_option, hours in time_options:
                markup.add(types.InlineKeyboardButton(
                    text_option, 
                    callback_data=f"rent_time:{acc_id}:{hours}"
                ))
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–≤–æ–¥–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            markup.add(types.InlineKeyboardButton(
                "‚öôÔ∏è –ö–∞—Å—Ç–æ–º–Ω–æ–µ –≤—Ä–µ–º—è", 
                callback_data=f"rent_custom:{acc_id}"
            ))
            
            # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
            markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"info:{acc_id}"))
            
            safe_edit_message_text(bot, text, call.message.chat.id, call.message.message_id, reply_markup=markup, parse_mode="HTML")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ cb_rent: {e}")
            bot.answer_callback_query(call.id)
            try:
                bot.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏ –∞—Ä–µ–Ω–¥—ã.", call.message.chat.id, call.message.message_id, reply_markup=main_menu())
            except Exception:
                bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏ –∞—Ä–µ–Ω–¥—ã.", reply_markup=main_menu())

    # --- –ê–†–ï–ù–î–ê –ê–ö–ö–ê–£–ù–¢–ê –° –£–ö–ê–ó–ê–ù–ù–´–ú –í–†–ï–ú–ï–ù–ï–ú ---
    @bot.callback_query_handler(func=lambda c: c.data.startswith("rent_time:"))
    @auth_required
    def cb_rent_time(call):
        bot.answer_callback_query(call.id)
        try:
            parts = call.data.split(":")
            acc_id = parts[1]
            hours = int(parts[2])
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Ä–µ–Ω–¥—É
            execute_rent(call, acc_id, hours)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ cb_rent_time: {e}")
            bot.answer_callback_query(call.id)
            try:
                bot.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä–µ–Ω–¥–µ –∞–∫–∫–∞—É–Ω—Ç–∞.", call.message.chat.id, call.message.message_id, reply_markup=main_menu())
            except Exception:
                bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä–µ–Ω–¥–µ –∞–∫–∫–∞—É–Ω—Ç–∞.", reply_markup=main_menu())

    # --- –ö–ê–°–¢–û–ú–ù–ê–Ø –ê–†–ï–ù–î–ê ---
    @bot.callback_query_handler(func=lambda c: c.data.startswith("rent_custom:"))
    @auth_required
    def cb_rent_custom(call):
        bot.answer_callback_query(call.id)
        try:
            acc_id = call.data.split(":")[1]
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ –≤—Ä–µ–º—è
            text = "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã –≤ —á–∞—Å–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5 –∏–ª–∏ 0.5 –¥–ª—è 30 –º–∏–Ω—É—Ç):"
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏", callback_data=f"rent:{acc_id}"))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏
            user_states[call.from_user.id] = {
                'state': 'awaiting_custom_rent_time',
                'account_id': acc_id,
                'chat_id': call.message.chat.id,
                'message_id': call.message.message_id
            }
            
            safe_edit_message_text(bot, text, call.message.chat.id, call.message.message_id, reply_markup=markup)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ cb_rent_custom: {e}")
            bot.answer_callback_query(call.id)
            try:
                bot.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π –∞—Ä–µ–Ω–¥—ã.", call.message.chat.id, call.message.message_id, reply_markup=main_menu())
            except Exception:
                bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π –∞—Ä–µ–Ω–¥—ã.", reply_markup=main_menu())

    # --- –§–£–ù–ö–¶–ò–Ø –í–´–ü–û–õ–ù–ï–ù–ò–Ø –ê–†–ï–ù–î–´ ---
    def execute_rent(call, acc_id, hours):
        try:
            conn = sqlite3.connect(DB_PATH)
            c = conn.cursor()
            c.execute("SELECT * FROM accounts WHERE id=?", (acc_id,))
            acc = c.fetchone()
            conn.close()

            if not acc:
                bot.send_message(call.message.chat.id, "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            if acc[5] != "free":
                bot.send_message(call.message.chat.id, "‚ùå –ê–∫–∫–∞—É–Ω—Ç —É–∂–µ –≤ –∞—Ä–µ–Ω–¥–µ.")
                return
                
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã
            rent_seconds = int(hours * 60 * 60)
            rented_until = datetime.now() + timedelta(seconds=rent_seconds)
            
            try:
                # –î–ª—è –∞—Ä–µ–Ω–¥—ã —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º –∏—Å–ø–æ–ª—å–∑—É–µ–º ID –∑–∞–∫–∞–∑–∞ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º TG-
                tg_order_id = f"TG-{acc_id}"
                mark_account_rented(acc_id, call.from_user.id, rented_until.timestamp(), tg_order_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –∫–∞–∫ –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–≥–æ: {e}")
                bot.send_message(call.message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä–µ–Ω–¥–µ –∞–∫–∫–∞—É–Ω—Ç–∞.")
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            order = {'chat_id': call.message.chat.id, 'buyer': call.from_user.id, 'description': acc[3]}
            
            try:
                pass  # –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –æ—Å—Ç–∞–≤–∏–º –≤—ã–∑–æ–≤ –¥–ª—è FunPay –æ—Ç–¥–µ–ª—å–Ω–æ NOTE next update~~~
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
                
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ-–≤–æ–∑–≤—Ä–∞—Ç
            def notify_callback(acc_id, tg_user_id):
                try:
                    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∑–∞–∫–∞–∑–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º order_id
                    from steam.steam_account_rental_utils import send_order_completed_message, DB_PATH
                    import sqlite3
                    
                    # –ü–æ–ª—É—á–∞–µ–º order_id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    order_id = None
                    try:
                        conn = sqlite3.connect(DB_PATH)
                        c = conn.cursor()
                        c.execute("PRAGMA table_info(accounts)")
                        columns = [column[1] for column in c.fetchall()]
                        
                        if 'order_id' in columns:
                            c.execute("SELECT order_id FROM accounts WHERE id=?", (acc_id,))
                            row = c.fetchone()
                            if row and row[0]:
                                order_id = row[0]
                        conn.close()
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ order_id –∏–∑ –ë–î: {e}")
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π order_id –∏–ª–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º TG-–ø—Ä–µ—Ñ–∏–∫—Å
                    real_order_id = order_id or f"TG-{acc_id}"
                    order_data = {'chat_id': tg_user_id, 'order_id': real_order_id}
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≤–µ—Ä—à–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    send_order_completed_message(order_data, bot.send_message)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ callback –¥–ª—è –∞—Ä–µ–Ω–¥—ã: {e}")
                    
            try:
                auto_end_rent(acc_id, call.from_user.id, rent_seconds, notify_callback=notify_callback)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∞–≤—Ç–æ–≤–æ–∑–≤—Ä–∞—Ç–∞: {e}")
                
            bot.answer_callback_query(call.id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∞—Ä–µ–Ω–¥–µ
            rented_until_str = rented_until.strftime('%H:%M:%S %d.%m.%Y')
            remaining_time = rented_until - datetime.now()
            total_seconds = int(remaining_time.total_seconds())
            if total_seconds < 0:
                remaining_str = "–í—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã –∏—Å—Ç–µ–∫–ª–æ"
            else:
                hours, remainder = divmod(total_seconds, 3600)
                minutes, seconds = divmod(remainder, 60)
                remaining_parts = []
                if hours > 0: remaining_parts.append(f"{hours} —á.")
                if minutes > 0: remaining_parts.append(f"{minutes} –º–∏–Ω.")
                remaining_parts.append(f"{seconds} —Å–µ–∫.")
                remaining_str = ", ".join(remaining_parts)
                if not remaining_str: remaining_str = "< 1 —Å–µ–∫."
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
            if hours == int(hours):
                hours_text = f"{int(hours)} —á–∞—Å–æ–≤"
            else:
                hours_text = f"{hours} —á–∞—Å–æ–≤"
                
            rent_msg = (
                f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç #{acc[0]} ({acc[1]}) –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω –Ω–∞ {hours_text}!\n"
                f"–ê—Ä–µ–Ω–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è: {rented_until_str}\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å: {remaining_str}"
            )
            success_msg = bot.send_message(call.message.chat.id, rent_msg)
            
            def delete_rent_message():
                time.sleep(6)
                try:
                    bot.delete_message(call.message.chat.id, success_msg.message_id)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –∞—Ä–µ–Ω–¥–µ: {e}")

            threading.Thread(target=delete_rent_message, daemon=True).start()

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞
            cb_info(call)

        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ cb_rent: {e}")
            bot.answer_callback_query(call.id)
            try:
                bot.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä–µ–Ω–¥–µ –∞–∫–∫–∞—É–Ω—Ç–∞.", call.message.chat.id, call.message.message_id, reply_markup=main_menu())
            except Exception:
                bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä–µ–Ω–¥–µ –∞–∫–∫–∞—É–Ω—Ç–∞.", reply_markup=main_menu())

    # --- –í–û–ó–í–†–ê–¢ –ê–ö–ö–ê–£–ù–¢–ê ---
    @bot.callback_query_handler(func=lambda c: c.data.startswith("return:"))
    @auth_required
    def cb_return(call):
        bot.answer_callback_query(call.id)
        try:
            acc_id = call.data.split(":")[1]
            conn = sqlite3.connect(DB_PATH)
            c = conn.cursor()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–æ–ª–±—Ü–∞ order_id
            c.execute("PRAGMA table_info(accounts)")
            columns = [column[1] for column in c.fetchall()]
            order_id = None
            tg_user_id = None
            if 'order_id' in columns:
                c.execute("SELECT status, order_id, tg_user_id FROM accounts WHERE id=?", (acc_id,))
                row = c.fetchone()
                if row:
                    order_id = row[1]
                    tg_user_id = row[2]
            else:
                c.execute("SELECT status FROM accounts WHERE id=?", (acc_id,))
                row = c.fetchone()
            conn.close()

            if not row:
                bot.answer_callback_query(call.id)
                bot.send_message(call.message.chat.id, "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            if row[0] != "rented":
                bot.answer_callback_query(call.id)
                bot.send_message(call.message.chat.id, "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –≤ –∞—Ä–µ–Ω–¥–µ.")
                return
            try:
                mark_account_free(acc_id)
                # --- –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---
                funpay_msg = (
                    "–í–∞—à–∞ –∞—Ä–µ–Ω–¥–∞ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
                    "–í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ ‚Äî –Ω–∞—Ä—É—à–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–ª–∏ –∏–Ω–∞—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –ø—Ä–∏—á–∏–Ω–∞.\n"
                    "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
                )
                admin_msg = (
                    "–ê–†–ï–ù–î–ê –ó–ê–í–ï–†–®–ï–ù–ê (–∞–∫–∫–∞—É–Ω—Ç –æ—Å–≤–æ–±–æ–∂–¥—ë–Ω –¥–ª—è –Ω–æ–≤—ã—Ö –∞—Ä–µ–Ω–¥).\n"
                    "–ö–ª–∏–µ–Ω—Ç –≤—Å—ë –µ—â—ë –≤ –∞–∫–∫–∞—É–Ω—Ç–µ ‚Äî –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ –¥–æ—Å—Ç—É–ø–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é '–°–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'."
                )
                # –ï—Å–ª–∏ –µ—Å—Ç—å tg_user_id –∏ order_id ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É –≤ FunPay
                if tg_user_id and order_id and str(tg_user_id).isdigit() and not str(order_id).startswith('TG-'):
                    try:
                        from funpay_integration import FunPayListener
                        funpay = FunPayListener()
                        funpay.funpay_send_message_wrapper(tg_user_id, funpay_msg)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É FunPay: {e}")
                # –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –≤ Telegram
                msg = bot.send_message(call.message.chat.id, admin_msg)
                bot.answer_callback_query(call.id)

                def delete_admin_msg():
                        import time
                        time.sleep(5)
                        try:
                            bot.delete_message(call.message.chat.id, msg.message_id)
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞—Ä–µ–Ω–¥—ã: {e}")
                import threading
                threading.Thread(target=delete_admin_msg, daemon=True).start()

                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
                conn = sqlite3.connect(DB_PATH)
                c = conn.cursor()
                c.execute("SELECT game_name FROM accounts WHERE id=?", (acc_id,))
                game_row = c.fetchone()
                conn.close()
                game_name = game_row[0] if game_row else None

                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞
                cb_info(call)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞—Ä–µ–Ω–¥—ã", show_alert=True)
                safe_edit_message_text(bot, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞—Ä–µ–Ω–¥—ã.", call.message.chat.id, call.message.id, reply_markup=main_menu())
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ cb_return: {e}")
            bot.answer_callback_query(call.id)
            safe_edit_message_text(bot, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞—Ä–µ–Ω–¥—ã.", call.message.chat.id, call.message.id, reply_markup=main_menu())

    # --- –£–î–ê–õ–ï–ù–ò–ï –ê–ö–ö–ê–£–ù–¢–ê ---
    @bot.callback_query_handler(func=lambda c: c.data.startswith("del:"))
    @auth_required
    def cb_del(call):
        acc_id = call.data.split(":")[1]
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute("SELECT login FROM accounts WHERE id=?", (acc_id,))
        row = c.fetchone()
        if not row:
            conn.close()
            bot.answer_callback_query(call.id, "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        login = row[0]
        c.execute("DELETE FROM accounts WHERE id=?", (acc_id,))
        conn.commit()
        conn.close()
        
        text = f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç <b>{login}</b> —É–¥–∞–ª–µ–Ω"
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –í –º–µ–Ω—é", callback_data="back_to_menu"))
        
        safe_edit_message_text(bot, text, call.message.chat.id, call.message.message_id, reply_markup=markup, parse_mode="HTML")

    # --- –ü–û–õ–£–ß–ï–ù–ò–ï –ö–û–î–ê GUARD ---
    @bot.callback_query_handler(func=lambda c: c.data.startswith("guard:"))
    @auth_required
    def cb_get_guard(call):
        acc_id = call.data.split(":")[1]
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute("SELECT email_login, email_password, imap_host FROM accounts WHERE id=?", (acc_id,))
        row = c.fetchone()
        conn.close()

        if not row or not all(row):
            bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ—á—Ç—ã")
            return

        email_login, email_password, imap_host = row
        host, port = parse_imap_host_port(imap_host)

        def get_guard_code():
            try:
                code = fetch_steam_guard_code_from_email(email_login, email_password, host, port)
                if code:
                    bot.send_message(call.message.chat.id, f"üîë –ö–æ–¥ Guard: <code>{code}</code>", parse_mode="HTML")
                else:
                    bot.send_message(call.message.chat.id, "‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–¥–∞: {e}")
                bot.send_message(call.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")
                
        threading.Thread(target=get_guard_code).start()
        bot.answer_callback_query(call.id, "‚è≥ –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥...")

    # --- –í–´–•–û–î –ò–ó –ê–ö–ö–ê–£–ù–¢–ê ---
    @bot.message_handler(commands=['logout'])
    def cmd_self_logout(message):
        user_id = message.from_user.id
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute("UPDATE accounts SET status='free', rented_until=NULL, tg_user_id=NULL WHERE tg_user_id=?", (user_id,))
        conn.commit()
        conn.close()
        bot.send_message(message.chat.id, "‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")

    # --- –í–´–•–û–î –î–†–£–ì–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤) ---
    @bot.message_handler(commands=['logout_user'])
    @auth_required
    def cmd_logout_user(message):
        if message.from_user.id not in ADMIN_IDS:
            bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
            return

        try:
            user_id = int(message.text.split()[1])
            conn = sqlite3.connect(DB_PATH)
            c = conn.cursor()
            c.execute("UPDATE accounts SET status='free', rented_until=NULL, tg_user_id=NULL WHERE tg_user_id=?", (user_id,))
            conn.commit()
            conn.close()
            bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–≤–µ–¥–µ–Ω –∏–∑ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        except (IndexError, ValueError):
            bot.send_message(message.chat.id, "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    # --- –û–ë–†–ê–ë–û–¢–ö–ê –ù–ï–ò–ó–í–ï–°–¢–ù–´–• –ö–û–ú–ê–ù–î ---
    @bot.message_handler(func=lambda m: True)
    def fallback(message):
        user_id = message.from_user.id
        logger.info(f"[FALLBACK] Received message from user {user_id}: {message.text}")
        logger.info(f"[FALLBACK] Current user states: {user_states}")
        logger.info(f"[FALLBACK] User state: {user_states.get(user_id)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ awaiting_input
        if user_id in user_states and user_states[user_id]['state'].startswith('awaiting_input_'):
            logger.info(f"[FALLBACK] User {user_id} has awaiting_input state, calling handle_awaiting_input")
            handle_awaiting_input(message)
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ awaiting_custom_rent_time
        if user_id in user_states and user_states[user_id].get('state') == 'awaiting_custom_rent_time':
            logger.info(f"[FALLBACK] User {user_id} has awaiting_custom_rent_time state, calling handle_custom_rent_time")
            handle_custom_rent_time(message)
            return
            
        bot.send_message(message.chat.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é.")

    # --- –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï STEAM GUARD ---
    @bot.callback_query_handler(func=lambda c: c.data.startswith("toggle_guard:"))
    @auth_required
    def cb_toggle_guard(call):
        logger.debug(f"[TOGGLE] cb_toggle_guard –≤—ã–∑–≤–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏: {call.data}")
        bot.answer_callback_query(call.id, "–û–±—Ä–∞–±–æ—Ç–∫–∞...", show_alert=False)
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
            parts = call.data.split(":", 2)  # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ 3 —á–∞—Å—Ç–∏
            if len(parts) != 3:
                logger.error(f"[TOGGLE] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {call.data}")
                return
                
            acc_id = parts[1]
            game_name = parts[2]  # –û—Å—Ç–∞–≤—à–∞—è—Å—è —á–∞—Å—Ç—å - —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã
            
            logger.debug(f"[TOGGLE] –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ Steam Guard –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {acc_id}")
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
            conn = sqlite3.connect(DB_PATH)
            c = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            c.execute("SELECT steam_guard_enabled FROM accounts WHERE id=?", (acc_id,))
            row = c.fetchone()
            
            if not row:
                logger.error(f"[TOGGLE] –ê–∫–∫–∞—É–Ω—Ç {acc_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                bot.answer_callback_query(call.id, "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                conn.close()
                return
                
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
            try:
                current_state = int(row[0]) if row[0] is not None else 1
            except (ValueError, TypeError):
                logger.warning(f"[TOGGLE] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ë–î: {row[0]}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1")
                current_state = 1
                
            # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            new_state = 0 if current_state else 1
            
            logger.debug(f"[TOGGLE] –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}, –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {new_state}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
            c.execute("UPDATE accounts SET steam_guard_enabled = ? WHERE id=?", (new_state, acc_id))
            conn.commit()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
            c.execute("SELECT steam_guard_enabled FROM accounts WHERE id=?", (acc_id,))
            updated_row = c.fetchone()
            
            if updated_row:
                try:
                    updated_state = int(updated_row[0]) if updated_row[0] is not None else 1
                except (ValueError, TypeError):
                    logger.error(f"[TOGGLE] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {updated_row[0]}")
                    updated_state = new_state
            else:
                logger.error("[TOGGLE] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
                updated_state = new_state
                
            conn.close()
            
            if updated_state == new_state:
                logger.debug(f"[TOGGLE] –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ –ë–î")
                # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
                bot.answer_callback_query(call.id, f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞! {'–í–∫–ª—é—á–µ–Ω' if new_state else '–í—ã–∫–ª—é—á–µ–Ω'} –ø–æ–∏—Å–∫ –∫–æ–¥–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞", show_alert=True)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                show_accounts_page(call.message, game_name, 0)
                
            else:
                logger.error(f"[TOGGLE] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –ë–î. –û–∂–∏–¥–∞–ª–æ—Å—å: {new_state}, –ø–æ–ª—É—á–µ–Ω–æ: {updated_state}")
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", show_alert=True)
            
        except Exception as e:
            logger.error(f"[TOGGLE] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ Steam Guard: {e}")
            bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    # --- –ù–ê–°–¢–†–û–ò–¢–¨ –ü–û–ß–¢–£ –ê–ö–ö–ê–£–ù–¢–ê ---
    @bot.callback_query_handler(func=lambda c: c.data.startswith("mail:"))
    @auth_required
    def cb_mail(call):
        try:
            acc_id = call.data.split(":")[1]
            user_id = call.from_user.id

            if user_id not in user_acc_data:
                user_acc_data[user_id] = {}
            user_acc_data[user_id]['chg_acc_id'] = acc_id
            user_states[user_id] = "change_mail_login"

            bot.answer_callback_query(call.id, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–æ–≥–∏–Ω –ø–æ—á—Ç—ã:")
            bot.delete_message(call.message.chat.id, call.message.message_id)

        except Exception as e:
            logger.error(f"Error handling mail callback {call.data}: {e}")
            bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø–æ—á—Ç—ã")

    @bot.message_handler(func=lambda m: user_states.get(m.from_user.id) == "change_mail_login")
    @auth_required
    def change_mail_login_step(message):
        user_id = message.from_user.id
        if user_id not in user_acc_data or 'chg_acc_id' not in user_acc_data[user_id]:
            bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=main_menu())
            user_states.pop(user_id, None)
            user_acc_data.pop(user_id, None)
            return

        acc_id = user_acc_data[user_id]['chg_acc_id']
        new_mail_login = message.text.strip()

        try:
            conn = sqlite3.connect(DB_PATH)
            c = conn.cursor()
            c.execute("UPDATE accounts SET email_login=? WHERE id=?", (new_mail_login, acc_id))
            conn.commit()
            conn.close()

            user_acc_data[user_id]['new_mail_login'] = new_mail_login
            user_states[user_id] = "change_mail_password"
            bot.send_message(message.chat.id, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –ø–æ—á—Ç—ã:")

        except Exception as e:
            logger.error(f"Error changing mail login for account {acc_id}: {e}")
            bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ª–æ–≥–∏–Ω–∞ –ø–æ—á—Ç—ã.")
            user_states.pop(user_id, None)
            user_acc_data.pop(user_id, None)

    @bot.message_handler(func=lambda m: user_states.get(m.from_user.id) == "change_mail_password")
    @auth_required
    def change_mail_password_step(message):
        user_id = message.from_user.id
        if user_id not in user_acc_data or 'chg_acc_id' not in user_acc_data[user_id]:
            bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=main_menu())
            user_states.pop(user_id, None)
            user_acc_data.pop(user_id, None)
            return

        acc_id = user_acc_data[user_id]['chg_acc_id']
        new_mail_password = message.text.strip()

        try:
            conn = sqlite3.connect(DB_PATH)
            c = conn.cursor()
            c.execute("UPDATE accounts SET email_password=? WHERE id=?", (new_mail_password, acc_id))
            conn.commit()
            conn.close()

            user_acc_data[user_id]['new_mail_password'] = new_mail_password
            user_states[user_id] = "change_mail_imap"
            bot.send_message(message.chat.id, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π IMAP-—Å–µ—Ä–≤–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, imap.gmail.com):")

        except Exception as e:
            logger.error(f"Error changing mail password for account {acc_id}: {e}")
            bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è –ø–æ—á—Ç—ã.")
            user_states.pop(user_id, None)
            user_acc_data.pop(user_id, None)

    @bot.message_handler(func=lambda m: user_states.get(m.from_user.id) == "change_mail_imap")
    @auth_required
    def change_mail_imap_step(message):
        user_id = message.from_user.id
        if user_id not in user_acc_data or 'chg_acc_id' not in user_acc_data[user_id]:
            bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=main_menu())
            user_states.pop(user_id, None)
            user_acc_data.pop(user_id, None)
            return

        acc_id = user_acc_data[user_id]['chg_acc_id']
        new_imap_host_str = message.text.strip()

        try:
            host, port = parse_imap_host_port(new_imap_host_str)
            
            conn = sqlite3.connect(DB_PATH)
            c = conn.cursor()
            c.execute("UPDATE accounts SET imap_host=?, imap_port=? WHERE id=?", (host, port, acc_id))
            conn.commit()
            conn.close()

            updated_mail_login = user_acc_data[user_id].get('new_mail_login', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            bot.send_message(message.chat.id, 
                             f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ—á—Ç—ã –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {acc_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:\n" \
                             f"–õ–æ–≥–∏–Ω –ø–æ—á—Ç—ã: {updated_mail_login}\n" \
                             f"IMAP-—Å–µ—Ä–≤–µ—Ä: {host}{f':{port}' if port else ''}", 
                             reply_markup=main_menu())

            user_states.pop(user_id, None)
            user_acc_data.pop(user_id, None)

        except Exception as e:
            logger.error(f"Error changing mail IMAP for account {acc_id}: {e}")
            bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ IMAP-—Å–µ—Ä–≤–µ—Ä–∞.")
            user_states.pop(user_id, None)
            user_acc_data.pop(user_id, None)

    @bot.callback_query_handler(func=lambda call: call.data.startswith('login_settings:'))
    def cb_login_settings(call=None, chat_id=None, message_id=None, account_id=None):
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id, message_id –∏ account_id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ø–æ—Å–æ–±–∞ –≤—ã–∑–æ–≤–∞
            if call:
                logger.info(f"[CALLBACK] Received callback: {call.data}")
                current_chat_id = call.message.chat.id
                current_message_id = call.message.message_id
                account_id = call.data.split(':')[1]  # id —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ —Å—Ç—Ä–æ–∫–∞
                # –ú—ã –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –∑–¥–µ—Å—å, –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ callback
                bot.answer_callback_query(call.id, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ö–æ–¥–∞")
            elif chat_id is not None and message_id is not None and account_id is not None:
                current_chat_id = chat_id
                current_message_id = message_id
                # account_id —É–∂–µ –ø–µ—Ä–µ–¥–∞–Ω
                logger.info(f"[CALLBACK] Called cb_login_settings programmatically for account {account_id} at chat_id {chat_id}, message_id {message_id}")
                # –ó–¥–µ—Å—å –º—ã –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —Ç–∞–∫ –∫–∞–∫ –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª –≤—ã–∑–≤–∞–≤—à–∏–π –∫–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, cb_cancel_input)
            else:
                logger.error("[CALLBACK] cb_login_settings called with insufficient arguments.")
                # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã, –Ω–µ—Ç chat_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
                return

            # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å game_name –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥
            # –í –∏–¥–µ–∞–ª–µ, —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∞—Å—Ç—å—é callback_data –∏–ª–∏ –∏–∑–≤–ª–µ—á–µ–Ω—ã –∏–∑ –ë–î –ø–æ account_id
            # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Å–µ–π—á–∞—Å –∏–∑–≤–ª–µ–∫—É –∏–∑ –ë–î
            conn = sqlite3.connect(DB_PATH)
            cursor = conn.cursor()
            cursor.execute('SELECT game_name FROM accounts WHERE id = ?', (account_id,))
            result = cursor.fetchone()
            conn.close()

            game_name = result[0] if result else "Unknown Game"

            keyboard = types.InlineKeyboardMarkup()

            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤—Ö–æ–¥–∞
            # Callback data –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å account_id –∏ —Ç–∏–ø –ø–æ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
            keyboard.add(types.InlineKeyboardButton("üîë –õ–æ–≥–∏–Ω Steam", callback_data=f"change_field:{account_id}:login"))
            keyboard.add(types.InlineKeyboardButton("üîê –ü–∞—Ä–æ–ª—å Steam", callback_data=f"change_field:{account_id}:password"))
            keyboard.add(types.InlineKeyboardButton("üìß –ü–æ—á—Ç–∞", callback_data=f"change_field:{account_id}:email_login"))
            keyboard.add(types.InlineKeyboardButton("üîí –ü–∞—Ä–æ–ª—å –æ—Ç –ø–æ—á—Ç—ã", callback_data=f"change_field:{account_id}:email_password"))
            keyboard.add(types.InlineKeyboardButton("üåê IMAP —Å–µ—Ä–≤–µ—Ä", callback_data=f"change_field:{account_id}:imap_host"))

            # –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–∫–∫–∞—É–Ω—Ç–∞
            # –í–∞–∂–Ω–æ: –∑–¥–µ—Å—å callback_data –¥–æ–ª–∂–µ–Ω –≤–µ—Å—Ç–∏ –æ–±—Ä–∞—Ç–Ω–æ –∫ info:{account_id}
            back_to_info_callback = f"info:{account_id}"
            keyboard.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=back_to_info_callback))

            text = f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ö–æ–¥–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ #{account_id}"

            try:
                # –ü—Ä–æ–±—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                bot.edit_message_text(
                    chat_id=current_chat_id,
                    message_id=current_message_id,
                    text=text,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
            except Exception as edit_error:
                logger.warning(f"Failed to edit message, sending new one: {edit_error}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                bot.send_message(
                    chat_id=current_chat_id,
                    text=text,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )

            if call:
                bot.answer_callback_query(call.id, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ö–æ–¥–∞")

        except Exception as e:
            logger.error(f"Error in cb_login_settings: {e}", exc_info=True)
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫: –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è
            if call:
                # –ï—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ callback, –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                 try:
                     bot.answer_callback_query(call.id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)
                     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ —á–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ –∏–∑ call
                     bot.send_message(call.message.chat.id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤—Ö–æ–¥–∞: {e}")
                 except Exception as answer_e:
                     logger.error(f"Failed to answer callback query or send message in cb_login_settings error handler (from call): {answer_e}")
            elif chat_id:
                # –ï—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ (–∏–∑ cb_cancel_input) –∏ chat_id –¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                bot.send_message(chat_id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤—Ö–æ–¥–∞: {e}")
            else:
                 # –ï—Å–ª–∏ chat_id —Ç–æ–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
                 logger.error("Error in cb_login_settings, chat_id not available to send message.")

    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤—Ö–æ–¥–∞ ---
    @bot.message_handler(func=lambda message: message.from_user.id in user_states and user_states[message.from_user.id]['state'].startswith('awaiting_input_'))
    def handle_awaiting_input(message):
        user_id = message.from_user.id
        logger.info(f"[INPUT] Received message from user {user_id}: {message.text}")
        logger.info(f"[INPUT] Current user states: {user_states}")
        
        state_info = user_states.get(user_id)
        logger.info(f"[INPUT] State info for user {user_id}: {state_info}")

        if not state_info:
            logger.error(f"[INPUT] No state found for user {user_id}")
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            user_states.pop(user_id, None)
            user_acc_data.pop(user_id, None)
            return

        state = state_info['state']
        account_id = state_info['account_id']
        field_to_change = state.replace('awaiting_input_', '')
        new_value = message.text

        logger.info(f"[INPUT] Processing input for field {field_to_change} of account {account_id}")
        logger.info(f"[INPUT] New value: {new_value}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞"
        if new_value == "–û—Ç–º–µ–Ω–∞":
            user_states.pop(user_id, None)
            user_acc_data.pop(user_id, None)
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤—Ö–æ–¥–∞
            # –ù—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å cb_login_settings –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç call –¥–ª—è –≤—ã–∑–æ–≤–∞ cb_login_settings
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç Call —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ –∏–∑ state_info
            class MockCall:
                def __init__(self, message_id, chat_id, user_id, data):
                    self.id = f"mock_{message_id}" # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è callback
                    self.message = type('MockMessage', (object,), {'message_id': message_id, 'chat': type('MockChat', (object,), {'id': chat_id})})()
                    self.from_user = type('MockUser', (object,), {'id': user_id})()
                    self.data = data

            mock_call = MockCall(message.message_id, message.chat.id, user_id, f"login_settings:{account_id}") # –ò—Å–ø–æ–ª—å–∑—É–µ–º message.message_id –∏ chat.id

            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º
            try:
                 bot.delete_message(message.chat.id, state_info['request_message_id'])
            except Exception as e:
                 logger.error(f"Error deleting request message on cancel: {e}")

            cb_login_settings(mock_call)
            return

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –≤–≤–æ–¥–∞ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            bot.delete_message(message.chat.id, message.message_id) # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            bot.delete_message(message.chat.id, state_info['request_message_id']) # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º
        except Exception as e:
            logger.error(f"Error deleting messages: {e}")

        # --- –õ–æ–≥–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î ---
        conn = None
        try:
            conn = sqlite3.connect(DB_PATH)
            cursor = conn.cursor()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–µ –ø–æ–ª–µ –≤ —Ç–∞–±–ª–∏—Ü–µ accounts
            cursor.execute(f"PRAGMA table_info(accounts)")
            columns = [column[1] for column in cursor.fetchall()]

            if field_to_change in columns:
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
                cursor.execute(f"SELECT {field_to_change} FROM accounts WHERE id = ?", (account_id,))
                result = cursor.fetchone()
                if not result:
                    raise Exception(f"–ê–∫–∫–∞—É–Ω—Ç #{account_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                old_value = result[0]

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                update_query = f"UPDATE accounts SET {field_to_change} = ? WHERE id = ?"
                cursor.execute(update_query, (new_value, account_id))
                conn.commit()
                logger.info(f"[DB] Account {account_id}: updated field {field_to_change} from '{old_value}' to '{new_value}'")

                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ user_acc_data –≤ –ø–∞–º—è—Ç–∏, –µ—Å–ª–∏ –æ–Ω–∏ —Ç–∞–º –µ—Å—Ç—å
                if user_id in user_acc_data and user_acc_data[user_id] and user_acc_data[user_id]['id'] == account_id:
                     if field_to_change == 'steam_login':
                         user_acc_data[user_id]['login'] = new_value
                     elif field_to_change == 'steam_password':
                         user_acc_data[user_id]['password'] = new_value
                     elif field_to_change == 'email_login':
                         user_acc_data[user_id]['email_login'] = new_value
                     elif field_to_change == 'email_password':
                         user_acc_data[user_id]['email_password'] = new_value
                     elif field_to_change == 'imap_host':
                         user_acc_data[user_id]['imap_host'] = new_value
                         # –ï—Å–ª–∏ –º–µ–Ω—è–µ–º IMAP —Ö–æ—Å—Ç, –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å –ø–æ—Ä—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                         if ':' in new_value:
                             try:
                                 # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç host:port
                                 host_part, port_part = new_value.split(':', 1)
                                 # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Ä—Ç–æ–≤–∞—è —á–∞—Å—Ç—å —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä
                                 if port_part.isdigit():
                                     user_acc_data[user_id]['imap_host'] = host_part # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ö–æ—Å—Ç –≤ imap_host
                                     user_acc_data[user_id]['imap_port'] = int(port_part) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—Ç –≤ imap_port
                                     # –û–±–Ω–æ–≤–ª—è–µ–º –ë–î –¥–ª—è imap_port —Ç–æ–∂–µ
                                     cursor.execute("UPDATE accounts SET imap_host = ?, imap_port = ? WHERE id = ?", (host_part, int(port_part), account_id))
                                     conn.commit()
                                     logger.info(f"[DB] Account {account_id}: updated imap_host to '{host_part}' and imap_port to {port_part}")
                                 else:
                                      # –ï—Å–ª–∏ –ø–æ—Ä—Ç–æ–≤–∞—è —á–∞—Å—Ç—å –Ω–µ —Ü–∏—Ñ—Ä–æ–≤–∞—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å –≤ imap_host –∏ —Å—Ç–∞–≤–∏–º –ø–æ—Ä—Ç None
                                     user_acc_data[user_id]['imap_host'] = new_value # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –≤ imap_host
                                     user_acc_data[user_id]['imap_port'] = None
                                     # –û–±–Ω–æ–≤–ª—è–µ–º –ë–î –¥–ª—è imap_port —Ç–æ–∂–µ
                                     cursor.execute("UPDATE accounts SET imap_host = ?, imap_port = ? WHERE id = ?", (new_value, None, account_id))
                                     conn.commit()
                                     logger.warning(f"[DB] Account {account_id}: could not parse port from {new_value}. Saved as imap_host and imap_port set to None.")
                             except Exception as parse_e:
                                 logger.error(f"Error parsing imap_host '{new_value}': {parse_e}")
                                 # –ï—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å –≤ imap_host –∏ —Å—Ç–∞–≤–∏–º –ø–æ—Ä—Ç None
                                 user_acc_data[user_id]['imap_host'] = new_value
                                 user_acc_data[user_id]['imap_port'] = None
                                 # –û–±–Ω–æ–≤–ª—è–µ–º –ë–î –¥–ª—è imap_port —Ç–æ–∂–µ
                                 cursor.execute("UPDATE accounts SET imap_host = ?, imap_port = ? WHERE id = ?", (new_value, None, account_id))
                                 conn.commit()
                                 logger.warning(f"[DB] Account {account_id}: failed parsing imap_host '{new_value}'. Saved as imap_host and imap_port set to None.")
                         else:
                             # –ï—Å–ª–∏ –Ω–µ—Ç –¥–≤–æ–µ—Ç–æ—á–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å –≤ imap_host –∏ —Å—Ç–∞–≤–∏–º –ø–æ—Ä—Ç None
                             user_acc_data[user_id]['imap_host'] = new_value
                             user_acc_data[user_id]['imap_port'] = None
                             # –û–±–Ω–æ–≤–ª—è–µ–º –ë–î –¥–ª—è imap_port —Ç–æ–∂–µ
                             cursor.execute("UPDATE accounts SET imap_host = ?, imap_port = ? WHERE id = ?", (new_value, None, account_id))
                             conn.commit()
                             logger.info(f"[DB] Account {account_id}: updated imap_host to '{new_value}', no port found. imap_port set to None.")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
                success_msg = bot.send_message(
                    message.chat.id,
                    f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n–ê–∫–∫–∞—É–Ω—Ç #{account_id}: –∏–∑–º–µ–Ω–µ–Ω {field_to_change} —Å '{old_value}' –Ω–∞ '{new_value}'"
                )

                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –ò –∑–∞—Ç–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
                def delete_success_message():
                    try:
                        bot.delete_message(message.chat.id, success_msg.message_id)
                        logger.info(f"[INPUT] –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ —É–¥–∞–ª–µ–Ω–æ")
                    except Exception as e:
                        logger.error(f"[INPUT] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ: {e}")
                    
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤—Ö–æ–¥–∞ –ü–û–°–õ–ï —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_id –∏ request_message_id –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é —Å –∑–∞–ø—Ä–æ—Å–æ–º –≤–≤–æ–¥–∞
                    # request_message_id —ç—Ç–æ ID —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –º—ã –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞,
                    # —Ç.–µ. —ç—Ç–æ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.
                    cb_login_settings(None, message.chat.id, state_info['request_message_id'], account_id)
                    logger.info(f"[INPUT] –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤—Ö–æ–¥–∞")


                threading.Timer(3.0, delete_success_message).start()

                # –í–∞–∂–Ω–æ: —É–±–∏—Ä–∞–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ cb_login_settings –æ—Ç—Å—é–¥–∞
                # cb_login_settings(None, message.chat.id, message.message_id, account_id)

            else:
                logger.warning(f"[DB] Attempted to update non-existent field: {field_to_change} for account {account_id}")
                bot.send_message(message.chat.id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: –ø–æ–ª–µ '{field_to_change}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

        except Exception as e:
            logger.error(f"Error updating account data: {e}", exc_info=True)
            bot.send_message(message.chat.id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

        finally:
            if conn:
                conn.close()
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_states.pop(user_id, None)
            user_acc_data.pop(user_id, None)

    @bot.callback_query_handler(func=lambda call: call.data.startswith('change_field:'))
    def cb_change_field(call):
        try:
            logger.info(f"[CALLBACK] Received callback: {call.data}")
            parts = call.data.split(':')
            account_id = parts[1]  # id —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ —Å—Ç—Ä–æ–∫–∞
            field_to_change = parts[2]

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
            user_id = call.from_user.id
            user_states[user_id] = {
                'state': f'awaiting_input_{field_to_change}',
                'account_id': account_id,
                'request_message_id': call.message.message_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            }
            logger.info(f"[CALLBACK] Set user state: {user_states[user_id]}")

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω–∞
            keyboard = types.InlineKeyboardMarkup()
            cancel_button = types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=f"cancel_input:{account_id}")
            keyboard.add(cancel_button)

            prompt_message = f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è '{field_to_change}':"
            sent_message = bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=prompt_message,
                reply_markup=keyboard,
                parse_mode="HTML"
            )

            bot.answer_callback_query(call.id, text=f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {field_to_change}")

        except Exception as e:
            logger.error(f"Error in cb_change_field: {e}")
            bot.answer_callback_query(call.id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
            bot.send_message(call.message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")


    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞" –ø—Ä–∏ –≤–≤–æ–¥–µ –¥–∞–Ω–Ω—ã—Ö
    @bot.callback_query_handler(func=lambda call: call.data.startswith('cancel_input:'))
    def cb_cancel_input(call):
        try:
            logger.info(f"[CALLBACK] Received callback: {call.data}")
            # --- –®–∞–≥ 1: –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query –ù–ï–ú–ï–î–õ–ï–ù–ù–û ---
            bot.answer_callback_query(call.id, text="–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.")

            account_id = call.data.split(':')[1]
            user_id = call.from_user.id
            state_info = user_states.get(user_id) # –ü–æ–ª—É—á–∞–µ–º state_info –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ request_message_id

            # --- –®–∞–≥ 2: –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º (–≥–¥–µ –±—ã–ª–∞ –∫–Ω–æ–ø–∫–∞ –û—Ç–º–µ–Ω–∞) ---
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º message_id, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≤ user_states
            if state_info and 'request_message_id' in state_info:
                 try:
                      bot.delete_message(call.message.chat.id, state_info['request_message_id'])
                 except Exception as e:
                      logger.error(f"Error deleting request message on cancel: {e}")

            # --- –®–∞–≥ 3: –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
            user_states.pop(user_id, None)
            user_acc_data.pop(user_id, None)

            # --- –®–∞–≥ 4: –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤—Ö–æ–¥–∞ ---
            # –í—ã–∑—ã–≤–∞–µ–º cb_login_settings, –ø–µ—Ä–µ–¥–∞–≤–∞—è chat_id, message_id (–¢–ï–ö–£–©–ï–ì–û —Å–æ–æ–±—â–µ–Ω–∏—è call.message) –∏ account_id
            # –ú—ã –ø–µ—Ä–µ–¥–∞–µ–º message_id –¢–ï–ö–£–©–ï–ì–û —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ï–ì–û –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
            cb_login_settings(chat_id=call.message.chat.id, message_id=call.message.message_id, account_id=account_id)

        except Exception as e:
            logger.error(f"Error in cb_cancel_input for account {account_id}: {e}", exc_info=True)
            # –ï—Å–ª–∏ answer_callback_query –≤—ã—à–µ –≤—ã–±—Ä–æ—Å–∏–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è.
            # –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
            bot.send_message(call.message.chat.id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –≤–≤–æ–¥–∞: {e}")

    # --- –§–£–õ–õ –í–´–•–û–î (—á–µ—Ä–µ–∑ Playwright) ---
    @bot.callback_query_handler(func=lambda c: c.data.startswith("logout:"))
    @auth_required
    def cb_logout_account(call):
        bot.answer_callback_query(call.id)
        acc_id = call.data.split(":")[1]
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute("SELECT login, password FROM accounts WHERE id=?", (acc_id,))
        row = c.fetchone()
        conn.close()
        if not row:
            bot.send_message(call.message.chat.id, "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        login, password = row
        bot.send_message(call.message.chat.id, f"‚õîÔ∏è –ó–∞–ø—É—Å–∫–∞—é –ø–æ–ª–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ <b>{login}</b>...", parse_mode="HTML")

        import threading
        import asyncio
        from steam.steam_logout import steam_logout_all_sessions
        import os
        def logout_worker():
            try:
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                ok = steam_logout_all_sessions(login, password)
                if ok:
                    try:
                        session_file = os.path.join(os.path.dirname(os.path.abspath(__file__)), '..', 'sessions', f'steam_{login}.json')
                        if os.path.exists(session_file):
                            os.remove(session_file)
                    except Exception:
                        pass
                    bot.send_message(call.message.chat.id, f"‚úÖ <b>–§—É–ª–ª –≤—ã—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!</b>\n\n–°–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞. –ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –≤—Ö–æ–¥–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è Steam Guard.", parse_mode="HTML")
                else:
                    bot.send_message(call.message.chat.id, f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Ñ—É–ª–ª-–≤—ã—Ö–æ–¥–∞!</b> –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.", parse_mode="HTML")
            except Exception as e:
                bot.send_message(call.message.chat.id, f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ—É–ª–ª-–≤—ã—Ö–æ–¥–µ:</b> {e}", parse_mode="HTML")
        threading.Thread(target=logout_worker, daemon=True).start()

    # --- –°–ú–ï–ù–ê –î–ê–ù–ù–´–• –ê–ö–ö–ê–£–ù–¢–ê ---
    @bot.callback_query_handler(func=lambda c: c.data.startswith("chgdata:"))
    @auth_required
    def cb_change_data(call):
        bot.answer_callback_query(call.id)
        acc_id = call.data.split(":")[1]  # id —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ —Å—Ç—Ä–æ–∫–∞
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute("SELECT login, password, email_login, email_password, imap_host FROM accounts WHERE id=?", (acc_id,))
        row = c.fetchone()
        conn.close()
        if not row:
            bot.send_message(call.message.chat.id, "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        login, password, email_login, email_password, imap_host = row
        bot.send_message(call.message.chat.id, f"‚è≥ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ—Ü–µ—Å—Å —Å–º–µ–Ω—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è <code>{login}</code>...", parse_mode="HTML")
    
        import threading
        def worker():
            import asyncio
            async def run_change():
                try:
                    logger.info(f"[AUTO_END_RENT] –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–º–µ–Ω—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {acc_id}...")
                    from utils.browser_config import get_browser_config
                    screenshots_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'screenshots')
                    os.makedirs(screenshots_dir, exist_ok=True)
                    logger.info(f"[AUTO_END_RENT] –ü–∞–ø–∫–∞ –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–∞: {screenshots_dir}")
                    logger.info(f"[AUTO_END_RENT] –ó–∞–ø—É—Å–∫–∞–µ–º Playwright...")
                    async with async_playwright() as p:
                        browser_config = get_browser_config()
                        logger.info(f"[AUTO_END_RENT] –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π: {browser_config}")
                        browser = await p.chromium.launch(**browser_config)
                        logger.info(f"[AUTO_END_RENT] –ë—Ä–∞—É–∑–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
                        
                        logger.info(f"[AUTO_END_RENT] –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã...")
                        await asyncio.sleep(2)
                        
                        logger.info(f"[AUTO_END_RENT] –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –±—Ä–∞—É–∑–µ—Ä–∞...")
                        try:
                            context = await browser.new_context(
                                user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36",
                                viewport=None,
                                locale="ru-RU",
                                java_script_enabled=True,
                                ignore_https_errors=True
                            )
                            logger.info(f"[AUTO_END_RENT] ‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –±—Ä–∞—É–∑–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                            
                            logger.info(f"[AUTO_END_RENT] –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
                            page = await context.new_page()
                            logger.info(f"[AUTO_END_RENT] ‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                            
                            logger.info(f"[AUTO_END_RENT] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã...")
                            page.set_default_timeout(30000)
                            page.set_default_navigation_timeout(30000)
                            logger.info(f"[AUTO_END_RENT] ‚úÖ –¢–∞–π–º–∞—É—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                            
                            logger.info(f"[AUTO_END_RENT] –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ Steam...")
                            await page.goto('https://store.steampowered.com/login/')
                            logger.info(f"[AUTO_END_RENT] ‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—ã–ø–æ–ª–Ω–µ–Ω")
                            
                            logger.info(f"[AUTO_END_RENT] –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
                            await page.wait_for_load_state('networkidle')
                            logger.info(f"[AUTO_END_RENT] ‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                        except Exception as e:
                            logger.error(f"[AUTO_END_RENT] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞/—Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
                            raise
                        screenshot_path = os.path.join(screenshots_dir, f'login_page_{acc_id}.png')
                        await page.screenshot(path=screenshot_path)
                        with open(screenshot_path, 'rb') as photo:
                            bot.send_photo(call.message.chat.id, photo, caption=f"[STEAM][ID: {acc_id}][LOGIN: {html.escape(login)}] –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞")
                        try:
                            await page.wait_for_selector('input[type="text"]', timeout=20000)
                            await page.fill('input[type="text"]', login)
                            await page.fill('input[type="password"]', password)
                            await page.click("button[type='submit']")
                            await page.wait_for_selector("#auth_buttonset_entercode, input[maxlength='1'], #account_pulldown, .newlogindialog_FormError", timeout=25000)
                            need_guard = False
                            if await page.query_selector("#auth_buttonset_entercode"):
                                need_guard = True
                            elif await page.query_selector("input[maxlength='1']"):
                                need_guard = True
                            if need_guard:
                                bot.send_message(call.message.chat.id, f"[STEAM][ID: {acc_id}][LOGIN: {html.escape(login)}] –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ Steam Guard. –ü–æ–ª—É—á–∞—é –∫–æ–¥ —Å –ø–æ—á—Ç—ã...")
                                from utils.email_utils import fetch_steam_guard_code_from_email
                                code = fetch_steam_guard_code_from_email(email_login, email_password, imap_host, logger=None, mode='login')
                                if code:
                                    bot.send_message(call.message.chat.id, f"[STEAM][ID: {acc_id}][LOGIN: {html.escape(login)}] –ü–æ–ª—É—á–µ–Ω –∫–æ–¥: {code}")
                                    if await page.query_selector("input[maxlength='1']"):
                                        inputs = await page.query_selector_all("input[maxlength='1']")
                                        if len(inputs) == len(code):
                                            for i, ch in enumerate(code):
                                                await inputs[i].fill(ch)
                                            await asyncio.sleep(2)
                                    elif await page.query_selector("input[name='authcode']"):
                                        await page.fill("input[name='authcode']", code)
                                        await asyncio.sleep(1)
                                        submit_btn = await page.query_selector("button[type='submit']")
                                        if submit_btn:
                                            await submit_btn.click()
                                    await asyncio.sleep(5)
                                else:
                                    bot.send_message(call.message.chat.id, f"[STEAM][ID: {acc_id}][LOGIN: {html.escape(login)}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ Steam Guard")
                                    return
                                    
                            if await page.query_selector("#account_pulldown"):
                                screenshot_path = os.path.join(screenshots_dir, f'login_success_{acc_id}.png')
                                await page.screenshot(path=screenshot_path)
                                with open(screenshot_path, 'rb') as photo:
                                    bot.send_photo(call.message.chat.id, photo, caption=f"[STEAM][ID: {acc_id}][LOGIN: {html.escape(login)}] –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥")
                                await page.goto('https://help.steampowered.com/wizard/HelpChangePassword?redir=store/account/')
                                await page.wait_for_load_state('networkidle')
                                await asyncio.sleep(2)
                                screenshot_path = os.path.join(screenshots_dir, f'password_change_page_{acc_id}.png')
                                await page.screenshot(path=screenshot_path)
                                with open(screenshot_path, 'rb') as photo:
                                    bot.send_photo(call.message.chat.id, photo, caption=f"[STEAM][ID: {acc_id}][LOGIN: {html.escape(login)}] –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è")
                                await page.click('a.help_wizard_button')
                                await asyncio.sleep(2)
                                screenshot_path = os.path.join(screenshots_dir, f'code_sent_{acc_id}.png')
                                await page.screenshot(path=screenshot_path)
                                with open(screenshot_path, 'rb') as photo:
                                    bot.send_photo(call.message.chat.id, photo, caption=f"[STEAM][ID: {acc_id}][LOGIN: {html.escape(login)}] –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–æ—á—Ç—É")
                                logger.info(f"[AUTO_END_RENT] –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ —Å –ø–æ—á—Ç—ã...")
                                logger.info(f"[AUTO_END_RENT] Email: {email_login[:3]}***@{email_login.split('@')[1] if '@' in email_login else 'unknown'}")
                                logger.info(f"[AUTO_END_RENT] IMAP —Ö–æ—Å—Ç: {imap_host}")
                                
                                from utils.email_utils import fetch_steam_guard_code_from_email
                                
                                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                                logger.info(f"[AUTO_END_RENT] –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º 180 —Å–µ–∫—É–Ω–¥...")
                                code = fetch_steam_guard_code_from_email(
                                    email_login, 
                                    email_password, 
                                    imap_host, 
                                    logger=logger, 
                                    mode='change',
                                    timeout=180
                                )
                                logger.info(f"[AUTO_END_RENT] –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –ö–æ–¥ –ø–æ–ª—É—á–µ–Ω' if code else '‚ùå –ö–æ–¥ –Ω–µ –ø–æ–ª—É—á–µ–Ω'}")
                                if not code:
                                    bot.send_message(call.message.chat.id, f"[STEAM][ID: {acc_id}][LOGIN: {html.escape(login)}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ —Å –ø–æ—á—Ç—ã")
                                    return
                                else:
                                    logger.info(f"[AUTO_END_RENT] –ö–æ–¥ –ø–æ–ª—É—á–µ–Ω —Å –ø–æ—á—Ç—ã: {code[:3]}***")
                                    bot.send_message(call.message.chat.id, f"[STEAM][ID: {acc_id}][LOGIN: {html.escape(login)}] ‚úÖ –ö–æ–¥ –ø–æ–ª—É—á–µ–Ω: {code[:3]}***")
                                    
                                    logger.info(f"[AUTO_END_RENT] –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–µ —Å –∫–æ–¥–æ–º...")
                                    
                                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–ª—è –∫–æ–¥–∞
                                    code_selectors = [
                                        'input[name="authcode"]',
                                        'input[id="authcode"]', 
                                        'input[placeholder*="code"]',
                                        'input[placeholder*="–∫–æ–¥"]',
                                        'input[type="text"]',
                                        'input.authcode_entry_input',
                                        '#authcode_entry',
                                        '.authcode_entry input'
                                    ]
                                    
                                    code_filled = False
                                    for selector in code_selectors:
                                        try:
                                            logger.info(f"[AUTO_END_RENT] –ü—Ä–æ–±—É–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –∫–æ–¥–∞: {selector}")
                                            
                                            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
                                            await page.wait_for_selector(selector, timeout=3000)
                                            logger.info(f"[AUTO_END_RENT] ‚úÖ –≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω: {selector}")
                                            
                                            # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –ø–µ—Ä–µ–¥ –≤–≤–æ–¥–æ–º
                                            await page.fill(selector, "", timeout=3000)
                                            logger.info(f"[AUTO_END_RENT] –ü–æ–ª–µ –æ—á–∏—â–µ–Ω–æ")
                                            
                                            # –í–≤–æ–¥–∏–º –∫–æ–¥
                                            await page.fill(selector, code, timeout=5000)
                                            logger.info(f"[AUTO_END_RENT] ‚úÖ –ö–æ–¥ –≤–≤–µ–¥–µ–Ω: {code}")
                                            
                                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω
                                            entered_value = await page.input_value(selector)
                                            logger.info(f"[AUTO_END_RENT] –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è: {entered_value}")
                                            
                                            if entered_value == code:
                                                logger.info(f"[AUTO_END_RENT] ‚úÖ –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤–≤–µ–¥–µ–Ω –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä: {selector}")
                                                code_filled = True
                                                break
                                            else:
                                                logger.warning(f"[AUTO_END_RENT] –ö–æ–¥ –≤–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: –æ–∂–∏–¥–∞–ª–∏ {code}, –ø–æ–ª—É—á–∏–ª–∏ {entered_value}")
                                                
                                        except Exception as e:
                                            logger.warning(f"[AUTO_END_RENT] –°–µ–ª–µ–∫—Ç–æ—Ä {selector} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
                                            continue
                                    
                                    if not code_filled:
                                        logger.error(f"[AUTO_END_RENT] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞")
                                        bot.send_message(call.message.chat.id, f"[STEAM][ID: {acc_id}][LOGIN: {html.escape(login)}] ‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è. –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                                        return
                                    
                                    logger.info(f"[AUTO_END_RENT] –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É Continue...")
                                    
                                    # –ò—â–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–¥–∞
                                    continue_selectors = [
                                        'button:has-text("Continue")',
                                        'input[type="submit"]',
                                        'button[type="submit"]',
                                        'button:has-text("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")',
                                        '.auth_button_set .auth_button',
                                        '#auth_continue_button'
                                    ]
                                    
                                    continue_clicked = False
                                    for selector in continue_selectors:
                                        try:
                                            logger.info(f"[AUTO_END_RENT] –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É Continue: {selector}")
                                            
                                            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏
                                            await page.wait_for_selector(selector, timeout=3000)
                                            logger.info(f"[AUTO_END_RENT] ‚úÖ –ö–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: {selector}")
                                            
                                            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–¥ –Ω–∞–∂–∞—Ç–∏–µ–º
                                            screenshot_path = os.path.join(screenshots_dir, f'before_continue_click_{acc_id}.png')
                                            await page.screenshot(path=screenshot_path)
                                            logger.info(f"[AUTO_END_RENT] –°–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–¥ –Ω–∞–∂–∞—Ç–∏–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
                                            
                                            # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É
                                            await page.click(selector, timeout=3000)
                                            logger.info(f"[AUTO_END_RENT] ‚úÖ –ö–Ω–æ–ø–∫–∞ Continue –Ω–∞–∂–∞—Ç–∞ —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä: {selector}")
                                            
                                            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
                                            await asyncio.sleep(2)
                                            screenshot_path = os.path.join(screenshots_dir, f'after_continue_click_{acc_id}.png')
                                            await page.screenshot(path=screenshot_path)
                                            logger.info(f"[AUTO_END_RENT] –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
                                            
                                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞
                                            current_url = page.url
                                            logger.info(f"[AUTO_END_RENT] URL –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞: {current_url}")
                                            
                                            continue_clicked = True
                                            break
                                        except Exception as e:
                                            logger.warning(f"[AUTO_END_RENT] –°–µ–ª–µ–∫—Ç–æ—Ä –∫–Ω–æ–ø–∫–∏ {selector} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
                                            continue
                                    
                                    if not continue_clicked:
                                        logger.error(f"[AUTO_END_RENT] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É Continue")
                                        bot.send_message(call.message.chat.id, f"[STEAM][ID: {acc_id}][LOGIN: {html.escape(login)}] ‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è. –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                                        return
                                    
                                    logger.info(f"[AUTO_END_RENT] –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞...")
                                    await asyncio.sleep(5)
                                    
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞
                                    try:
                                        if page.is_closed():
                                            logger.error(f"[AUTO_END_RENT] ‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞!")
                                            bot.send_message(call.message.chat.id, f"[STEAM][ID: {acc_id}][LOGIN: {html.escape(login)}] ‚ùå –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã–ª—Å—è –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∫–æ–¥–∞")
                                            return
                                        else:
                                            logger.info(f"[AUTO_END_RENT] ‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–∫—Ç–∏–≤–Ω–∞")
                                            current_url = page.url
                                            logger.info(f"[AUTO_END_RENT] –¢–µ–∫—É—â–∏–π URL: {current_url}")
                                            
                                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—è–≤–∏–ª–∞—Å—å –ª–∏ –æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                                            page_content = await page.content()
                                            if "error" in page_content.lower() or "–æ—à–∏–±–∫–∞" in page_content.lower():
                                                logger.warning(f"[AUTO_END_RENT] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
                                                screenshot_path = os.path.join(screenshots_dir, f'error_after_code_{acc_id}.png')
                                                await page.screenshot(path=screenshot_path)
                                                
                                            logger.info(f"[AUTO_END_RENT] ‚úÖ –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É...")
                                    except Exception as e:
                                        logger.error(f"[AUTO_END_RENT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
                                        bot.send_message(call.message.chat.id, f"[STEAM][ID: {acc_id}][LOGIN: {html.escape(login)}] ‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –±—Ä–∞—É–∑–µ—Ä–æ–º –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∫–æ–¥–∞")
                                        return
                                    
                                    logger.info(f"[AUTO_END_RENT] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π URL –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∫–æ–¥–∞...")
                                    current_url = page.url
                                    logger.info(f"[AUTO_END_RENT] –¢–µ–∫—É—â–∏–π URL: {current_url}")
                                    
                                    # –ñ–¥–µ–º –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∏
                                    logger.info(f"[AUTO_END_RENT] –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
                                    try:
                                        await page.wait_for_load_state('networkidle', timeout=15000)
                                        logger.info(f"[AUTO_END_RENT] –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (networkidle)")
                                    except Exception as e:
                                        logger.warning(f"[AUTO_END_RENT] Timeout –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ networkidle: {e}")
                                    
                                    logger.info(f"[AUTO_END_RENT] –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∫–æ–¥–∞...")
                                    screenshot_path = os.path.join(screenshots_dir, f'code_entered_{acc_id}.png')
                                    await page.screenshot(path=screenshot_path)
                                    with open(screenshot_path, 'rb') as photo:
                                        bot.send_photo(call.message.chat.id, photo, caption=f"[STEAM][ID: {acc_id}][LOGIN: {html.escape(login)}] –ö–æ–¥ –≤–≤–µ–¥–µ–Ω")
                                    
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                                    logger.info(f"[AUTO_END_RENT] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
                                    page_content = await page.content()
                                    
                                    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                                    page_title = await page.title()
                                    logger.info(f"[AUTO_END_RENT] –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page_title}")
                                    
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                                    additional_buttons = await page.query_selector_all('button, input[type="submit"]')
                                    logger.info(f"[AUTO_END_RENT] –ù–∞–π–¥–µ–Ω–æ {len(additional_buttons)} –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
                                    
                                    for i, button in enumerate(additional_buttons):
                                        try:
                                            text = await button.inner_text()
                                            logger.info(f"[AUTO_END_RENT] –ö–Ω–æ–ø–∫–∞ {i+1}: '{text}'")
                                        except:
                                            logger.info(f"[AUTO_END_RENT] –ö–Ω–æ–ø–∫–∞ {i+1}: [—Ç–µ–∫—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω]")
                                    
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–ª–∏ –ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
                                    logger.info(f"[AUTO_END_RENT] –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–∏ –º—ã —Å—Ç—Ä–∞–Ω–∏—Ü–µ...")
                                    
                                    # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
                                    password_change_indicators = [
                                        'input[type="password"]',
                                        'text=Change Password',
                                        'text=–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å',
                                        '[placeholder*="password"]',
                                        '[placeholder*="–ø–∞—Ä–æ–ª—å"]'
                                    ]
                                    
                                    found_indicators = 0
                                    for indicator in password_change_indicators:
                                        try:
                                            elements = await page.query_selector_all(indicator)
                                            if elements:
                                                found_indicators += 1
                                                logger.info(f"[AUTO_END_RENT] ‚úÖ –ù–∞–π–¥–µ–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è: {indicator} ({len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)")
                                        except Exception as e:
                                            logger.debug(f"[AUTO_END_RENT] –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä {indicator} –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
                                    
                                    logger.info(f"[AUTO_END_RENT] –ù–∞–π–¥–µ–Ω–æ {found_indicators}/{len(password_change_indicators)} –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è")
                                    
                                    # –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤, –≤–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –Ω–∞–≤–∏–≥–∏—Ä–æ–≤–∞—Ç—å
                                    if found_indicators < 2:
                                        logger.warning(f"[AUTO_END_RENT] ‚ö†Ô∏è –ü–æ—Ö–æ–∂–µ, –º—ã –Ω–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è. –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É...")
                                        
                                        # –ò—â–µ–º —Å—Å—ã–ª–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–µ—Å—Ç–∏ –∫ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è
                                        change_password_links = await page.query_selector_all('a[href*="password"], a[href*="changepassword"], a:has-text("Change Password"), a:has-text("–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å")')
                                        logger.info(f"[AUTO_END_RENT] –ù–∞–π–¥–µ–Ω–æ {len(change_password_links)} —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å–º–µ–Ω—É –ø–∞—Ä–æ–ª—è")
                                        
                                        if change_password_links:
                                            logger.info(f"[AUTO_END_RENT] –ö–ª–∏–∫–∞–µ–º –ø–æ –ø–µ—Ä–≤–æ–π —Å—Å—ã–ª–∫–µ –Ω–∞ —Å–º–µ–Ω—É –ø–∞—Ä–æ–ª—è...")
                                            await change_password_links[0].click()
                                            await asyncio.sleep(3)
                                            
                                            # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
                                            logger.info(f"[AUTO_END_RENT] –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞ –ø–æ —Å—Å—ã–ª–∫–µ...")
                                            current_url_after = page.url
                                            logger.info(f"[AUTO_END_RENT] URL –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞: {current_url_after}")
                                        else:
                                            # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å - —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
                                            logger.info(f"[AUTO_END_RENT] –°—Å—ã–ª–∫–∏ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å...")
                                            
                                            # –ò—â–µ–º –º–µ–Ω—é –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
                                            account_menu_selectors = [
                                                'a:has-text("Account")',
                                                'a:has-text("–ê–∫–∫–∞—É–Ω—Ç")', 
                                                'a:has-text("Settings")',
                                                'a:has-text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")',
                                                '.account_menu',
                                                '#account_dropdown'
                                            ]
                                            
                                            for selector in account_menu_selectors:
                                                try:
                                                    element = await page.query_selector(selector)
                                                    if element:
                                                        logger.info(f"[AUTO_END_RENT] –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –º–µ–Ω—é: {selector}")
                                                        await element.click()
                                                        await asyncio.sleep(2)
                                                        break
                                                except Exception as e:
                                                    logger.debug(f"[AUTO_END_RENT] –≠–ª–µ–º–µ–Ω—Ç {selector} –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
                                            
                                            # –ü—Ä–æ–±—É–µ–º –ø—Ä—è–º—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
                                            logger.info(f"[AUTO_END_RENT] –ü—Ä–æ–±—É–µ–º –ø—Ä—è–º—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∫ /account/changepassword...")
                                            try:
                                                await page.goto("https://store.steampowered.com/account/changepassword/")
                                                await asyncio.sleep(3)
                                                logger.info(f"[AUTO_END_RENT] –ü–µ—Ä–µ—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–æ–≤—ã–π URL: {page.url}")
                                            except Exception as e:
                                                logger.warning(f"[AUTO_END_RENT] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞–ø—Ä—è–º—É—é: {e}")
                                    
                                    logger.info(f"[AUTO_END_RENT] –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤–≤–µ–¥–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è...")

                                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
                                    logger.info(f"[AUTO_END_RENT] –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å...")
                                    from utils.password import generate_password
                                    new_password = generate_password()
                                    logger.info(f"[AUTO_END_RENT] –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {new_password[:3]}***")
                                    
                                    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å –∏–∑ –ë–î –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
                                    logger.info(f"[AUTO_END_RENT] –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å –∏–∑ –ë–î –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {acc_id}...")
                                    conn = sqlite3.connect(DB_PATH)
                                    c = conn.cursor()
                                    c.execute('SELECT password FROM accounts WHERE id = ?', (acc_id,))
                                    result = c.fetchone()
                                    old_password_db = result[0] if result else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                                    logger.info(f"[AUTO_END_RENT] –°—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å –∏–∑ –ë–î: {old_password_db[:3]}***")
                                    conn.close()

                                    logger.info(f"[AUTO_END_RENT] –ò—â–µ–º –ø–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è...")
                                    password_fields = await page.query_selector_all('input[type="password"]')
                                    logger.info(f"[AUTO_END_RENT] –ù–∞–π–¥–µ–Ω–æ {len(password_fields)} –ø–æ–ª–µ–π —Ç–∏–ø–∞ password")
                                    
                                    if len(password_fields) >= 2:
                                        logger.info(f"[AUTO_END_RENT] –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è...")
                                        await password_fields[0].fill(new_password)
                                        logger.info(f"[AUTO_END_RENT] –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—Ç–æ—Ä–æ–µ –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è...")
                                        await password_fields[1].fill(new_password)
                                        logger.info(f"[AUTO_END_RENT] –û–±–∞ –ø–æ–ª—è –ø–∞—Ä–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
                                    else:
                                        logger.info(f"[AUTO_END_RENT] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª–µ–π password, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã...")
                                        filled = False
                                        for sel in [
                                            'input[placeholder*="Change my password"]',
                                            'input[placeholder*="Re-enter"]',
                                            'input[name*="new_password"]',
                                            'input[name*="reenter"]'
                                        ]:
                                            try:
                                                logger.info(f"[AUTO_END_RENT] –ü—Ä–æ–±—É–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä: {sel}")
                                                await page.fill(sel, new_password)
                                                logger.info(f"[AUTO_END_RENT] –£—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω —Å–µ–ª–µ–∫—Ç–æ—Ä: {sel}")
                                                filled = True
                                                break
                                            except Exception as e:
                                                logger.warning(f"[AUTO_END_RENT] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å {sel}: {e}")
                                                continue
                                        
                                        if not filled:
                                            logger.error(f"[AUTO_END_RENT] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è!")
                                    screenshot_path = os.path.join(screenshots_dir, f'password_ready_{acc_id}.png')
                                    await page.screenshot(path=screenshot_path)
                                    with open(screenshot_path, 'rb') as photo:
                                        bot.send_photo(call.message.chat.id, photo, caption=f"[STEAM][ID: {acc_id}][LOGIN: {html.escape(login)}] –ü–∞—Ä–æ–ª—å –≥–æ—Ç–æ–≤ –∫ —Å–º–µ–Ω–µ")
                                    
                                    logger.info(f"[AUTO_END_RENT] –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è...")
                                    
                                    click_successful = False
                                    
                                    # –ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π –ø–∞—Ä–æ–ª—è
                                    logger.info(f"[AUTO_END_RENT] –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–æ–º...")
                                    await asyncio.sleep(1)
                                    
                                    # –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∫–ª–∏–∫–∞
                                    logger.info(f"[AUTO_END_RENT] –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è...")
                                    for sel in [
                                        'button:has-text("–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å"):not([disabled])',
                                        'button:has-text("–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å")',
                                        '#change_password_button',
                                        '.change_password_button',
                                        'button:has-text("Change Password"):not([disabled])',
                                        'button:has-text("Change Password")',
                                        'button[type="submit"]',
                                        'input[type="submit"]',
                                    ]:
                                        try:
                                            logger.info(f"[AUTO_END_RENT] –ü—Ä–æ–±—É–µ–º –∫–ª–∏–∫–Ω—É—Ç—å —Å–µ–ª–µ–∫—Ç–æ—Ä: {sel}")
                                            await page.click(sel, timeout=3000)
                                            logger.info(f"[AUTO_END_RENT] ‚úÖ –£—Å–ø–µ—à–Ω–æ –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è: {sel}")
                                            clicked = True
                                            break
                                        except Exception as e:
                                            logger.warning(f"[AUTO_END_RENT] –ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å {sel}: {e}")
                                            continue
                                            
                                    if not clicked:
                                        logger.error("[AUTO_END_RENT] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è –Ω–∏ –æ–¥–Ω–∏–º –∏–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤!")
                                        screenshot_fail_path = os.path.join(screenshots_dir, f"auto_end_button_fail_{acc_id}.png")
                                        await page.screenshot(path=screenshot_fail_path)
                                        bot.send_message(call.message.chat.id, f"[STEAM][ID: {acc_id}][LOGIN: {html.escape(login)}] ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è")
                                        with open(screenshot_fail_path, 'rb') as photo:
                                            bot.send_photo(call.message.chat.id, photo, caption=f"[STEAM][ID: {acc_id}] –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ —Å–º–µ–Ω—ã")
                                        return
                                    
                                    logger.info(f"[AUTO_END_RENT] –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è...")
                                    await page.wait_for_load_state('networkidle')
                                    
                                    logger.info(f"[AUTO_END_RENT] –î–µ–ª–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç...")
                                    screenshot_path = os.path.join(screenshots_dir, f'password_changed_{acc_id}.png')
                                    await page.screenshot(path=screenshot_path)
                                    with open(screenshot_path, 'rb') as photo:
                                        bot.send_photo(call.message.chat.id, photo, caption=f"[STEAM][ID: {acc_id}][LOGIN: {html.escape(login)}] –ü–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω")
                                    
                                    logger.info(f"[AUTO_END_RENT] –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
                                    conn = sqlite3.connect(DB_PATH)
                                    c = conn.cursor()
                                    c.execute('UPDATE accounts SET password = ? WHERE id = ?', (new_password, acc_id))
                                    conn.commit()
                                    conn.close()
                                    logger.info(f"[AUTO_END_RENT] ‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {acc_id}")
                                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —Å –Ω–æ–≤—ã–º –∏ —Å—Ç–∞—Ä—ã–º –ø–∞—Ä–æ–ª–µ–º
                                    message_to_admin = (
                                        f"üîë –ü–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω—ë–Ω\n"
                                        f"ID: {acc_id}\n"
                                        f"–õ–æ–≥–∏–Ω: {html.escape(login)}\n"
                                        f"–°—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å: <code>{html.escape(old_password_db)}</code>\n"
                                        f"–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: <code>{html.escape(new_password)}</code>"
                                    )
                                    for admin_id in ADMIN_IDS:
                                        try:
                                            bot.send_message(admin_id, message_to_admin, parse_mode="HTML")
                                        except Exception as admin_msg_e:
                                            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {admin_msg_e}")
                                    # –£–¥–∞–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

                        except Exception as e:
                            logger.error(f"[AUTO_END_RENT] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è: {e}")
                            logger.error(f"[AUTO_END_RENT] –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
                            import traceback
                            logger.error(f"[AUTO_END_RENT] –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ —Å—Ç–µ–∫–∞: {traceback.format_exc()}")
                            
                            screenshot_path = os.path.join(screenshots_dir, f'error_{acc_id}.png')
                            await page.screenshot(path=screenshot_path)
                            with open(screenshot_path, 'rb') as photo:
                                bot.send_photo(call.message.chat.id, photo, caption=f"[STEAM][ID: {acc_id}][LOGIN: {html.escape(login)}] –û—à–∏–±–∫–∞: {html.escape(str(e))}")
                            html_content = await page.content()
                            html_path = os.path.join(screenshots_dir, f'error_page_{acc_id}.html')
                            with open(html_path, 'w', encoding='utf-8') as f:
                                f.write(html_content)
                            raise Exception(f"–û—à–∏–±–∫–∞: {html.escape(str(e))}")

                except Exception as e:
                    logger.error(f"[AUTO_END_RENT] ‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ worker: {e}")
                    import traceback
                    logger.error(f"[AUTO_END_RENT] –ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    error_str = str(e)
                    if "Timeout" in error_str or "timeout" in error_str:
                        bot.send_message(call.message.chat.id, f"[STEAM][ID: {acc_id}][LOGIN: {html.escape(login)}] ‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è. –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π Steam.")
                    elif "fill" in error_str and "input" in error_str:
                        bot.send_message(call.message.chat.id, f"[STEAM][ID: {acc_id}][LOGIN: {html.escape(login)}] ‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è. –ü–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                    elif "click" in error_str:
                        bot.send_message(call.message.chat.id, f"[STEAM][ID: {acc_id}][LOGIN: {html.escape(login)}] ‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è. –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                    else:
                        bot.send_message(call.message.chat.id, f"[STEAM][ID: {acc_id}][LOGIN: {html.escape(login)}] ‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞.")
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(run_change())
        threading.Thread(target=worker, daemon=True).start()

    # --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô –î–õ–Ø –ö–ê–°–¢–û–ú–ù–û–ì–û –í–†–ï–ú–ï–ù–ò –ê–†–ï–ù–î–´ ---
    @bot.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get('state') == 'awaiting_custom_rent_time')
    def handle_custom_rent_time(message):
        user_id = message.from_user.id
        state_info = user_states.get(user_id, {})
        
        if not state_info:
            return
            
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ —á–∏—Å–ª–æ
            hours = float(message.text.replace(',', '.'))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏ (–æ—Ç 0.1 —á–∞—Å–∞ –¥–æ 720 —á–∞—Å–æ–≤ = 30 –¥–Ω–µ–π)
            if hours < 0.1:
                bot.send_message(message.chat.id, "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã - 0.1 —á–∞—Å–∞ (6 –º–∏–Ω—É—Ç)")
                return
                
            if hours > 720:
                bot.send_message(message.chat.id, "‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã - 720 —á–∞—Å–æ–≤ (30 –¥–Ω–µ–π)")
                return
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤—Ä–µ–º–µ–Ω–µ–º
            try:
                bot.delete_message(message.chat.id, message.message_id)
            except Exception:
                pass
                
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_states.pop(user_id, None)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Ä–µ–Ω–¥—É –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è mock call
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
            conn = sqlite3.connect(DB_PATH)
            c = conn.cursor()
            c.execute("SELECT * FROM accounts WHERE id=?", (state_info['account_id'],))
            acc = c.fetchone()
            conn.close()
            
            if not acc:
                bot.send_message(message.chat.id, "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω –ª–∏ —É–∂–µ –∞–∫–∫–∞—É–Ω—Ç
            conn = sqlite3.connect(DB_PATH)
            c = conn.cursor()
            c.execute("SELECT rented_until FROM accounts WHERE id=? AND rented_until > ?", 
                     (state_info['account_id'], datetime.now().strftime('%Y-%m-%d %H:%M:%S')))
            if c.fetchone():
                conn.close()
                bot.send_message(message.chat.id, f"‚ùå –ê–∫–∫–∞—É–Ω—Ç #{acc[0]} —É–∂–µ –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω")
                return
            conn.close()
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Ä–µ–Ω–¥—É
            try:
                rent_seconds = int(hours * 3600)
                rented_until = datetime.now() + timedelta(seconds=rent_seconds)
                rented_until_str = rented_until.strftime('%d.%m.%Y, %H:%M (MSK)')
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ë–î
                conn = sqlite3.connect(DB_PATH)
                c = conn.cursor()
                c.execute("UPDATE accounts SET rented_until=?, rented_by=?, order_id=? WHERE id=?", 
                         (rented_until.strftime('%Y-%m-%d %H:%M:%S'), user_id, None, state_info['account_id']))
                conn.commit()
                conn.close()
                
                logger.debug(f"[RENT] –ê–∫–∫–∞—É–Ω—Ç {state_info['account_id']} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π –¥–æ {rented_until_str} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å order_id None")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—Ä–µ–Ω–¥—ã
                from steam.steam_account_rental_utils import auto_end_rent
                auto_end_rent(state_info['account_id'], user_id, rent_seconds)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
                if hours == int(hours):
                    hours_text = f"{int(hours)} —á–∞—Å–æ–≤"
                else:
                    hours_text = f"{hours} —á–∞—Å–æ–≤"
                    
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞—Ä–µ–Ω–¥–µ
                rent_msg = (
                    f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç #{acc[0]} ({acc[1]}) –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω –Ω–∞ {hours_text}!\n"
                    f"–ê—Ä–µ–Ω–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è: {rented_until_str}\n"
                    f"–õ–æ–≥–∏–Ω: <code>{acc[1]}</code>\n"
                    f"–ü–∞—Ä–æ–ª—å: <code>{acc[2]}</code>"
                )
                bot.send_message(message.chat.id, rent_msg, parse_mode="HTML")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞—Ä–µ–Ω–¥—ã: {e}")
                bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞ren–¥—ã")
            
        except ValueError:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5 –∏–ª–∏ 0.5 –¥–ª—è 30 –º–∏–Ω—É—Ç)")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∞—Ä–µ–Ω–¥—ã: {e}")
            bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏ –∞—Ä–µ–Ω–¥—ã")
            user_states.pop(user_id, None)

    # --- –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –£–õ–£–ß–®–ï–ù–ù–û–ì–û UI ---
    
    @bot.callback_query_handler(func=lambda c: c.data == "main_menu")
    @auth_required
    def cb_main_menu(call):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        bot.answer_callback_query(call.id)
        welcome_text = (
            "üöÄ <b>Steam Rental Bot v2.0</b>\n\n"
            "üí° <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—Ä–µ–Ω–¥–æ–π Steam –∞–∫–∫–∞—É–Ω—Ç–æ–≤!</b>\n\n"
            "üìã <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏</b> - –ø—Ä–æ—Å–º–æ—Ç—Ä, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
            "‚ûï <b>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç</b> - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ Steam –∞–∫–∫–∞—É–Ω—Ç–∞\n"
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</b> - –æ—Ç—á–µ—Ç—ã –ø–æ –∞—Ä–µ–Ω–¥–µ –∏ –¥–æ—Ö–æ–¥–∞–º\n"
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã</b> - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n"
            "üí¨ <b>–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞</b> - —Å–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n\n"
            "üî• –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:"
        )
        safe_edit_message_text(bot, call.message.chat.id, call.message.message_id, 
                               welcome_text, main_menu(), parse_mode="HTML")

    @bot.callback_query_handler(func=lambda c: c.data == "stats")
    @auth_required
    def cb_stats_menu(call):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        bot.answer_callback_query(call.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try:
            conn = sqlite3.connect(DB_PATH)
            c = conn.cursor()
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            c.execute("SELECT COUNT(*) FROM accounts")
            total_accounts = c.fetchone()[0]
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            c.execute("SELECT COUNT(*) FROM accounts WHERE status = 'free'")
            free_accounts = c.fetchone()[0]
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            rented_accounts = total_accounts - free_accounts
            
            # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–≥—Ä—ã
            c.execute("SELECT COUNT(DISTINCT game) FROM accounts")
            unique_games = c.fetchone()[0]
            
            conn.close()
            
            stats_text = (
                f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
                f"üéÆ <b>–í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:</b> {total_accounts}\n"
                f"üü¢ <b>–°–≤–æ–±–æ–¥–Ω—ã–µ:</b> {free_accounts}\n"
                f"üî¥ <b>–í –∞—Ä–µ–Ω–¥–µ:</b> {rented_accounts}\n"
                f"üéØ <b>–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–≥—Ä:</b> {unique_games}\n\n"
                f"üìà –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            stats_text = (
                "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö\n\n"
                "üìà –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:"
            )
        
        safe_edit_message_text(bot, call.message.chat.id, call.message.message_id, 
                               stats_text, stats_kb(), parse_mode="HTML")

    @bot.callback_query_handler(func=lambda c: c.data == "settings")
    @auth_required  
    def cb_settings_menu(call):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        bot.answer_callback_query(call.id)
        
        settings_text = (
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
            "üîß <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Steam Rental Bot</b>\n\n"
            "üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è–º–∏\n"
            "‚è∞ <b>–ê–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã</b> - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤\n"
            "üîê <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</b> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º –∏ –∑–∞—â–∏—Ç–æ–π\n"
            "üíæ <b>–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ</b> - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±—ç–∫–∞–ø–æ–≤\n\n"
            "‚ö° –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
        )
        
        safe_edit_message_text(bot, call.message.chat.id, call.message.message_id, 
                               settings_text, settings_kb(), parse_mode="HTML")

    @bot.callback_query_handler(func=lambda c: c.data in ["rental_stats", "financial_stats", "game_stats", "popular_accounts"])
    @auth_required
    def cb_detailed_stats(call):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        bot.answer_callback_query(call.id)
        
        stat_type = call.data
        
        try:
            conn = sqlite3.connect(DB_PATH)
            c = conn.cursor()
            
            if stat_type == "rental_stats":
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞—Ä–µ–Ω–¥—ã - —Å—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã
                c.execute("SELECT COUNT(*) FROM accounts WHERE status != 'free'")
                active_rentals = c.fetchone()[0]
                
                stats_text = (
                    f"üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞—Ä–µ–Ω–¥—ã</b>\n\n"
                    f"üî• <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥:</b> {active_rentals}\n"
                    f"‚è∞ <b>–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:</b> –ê–∫—Ç–∏–≤–Ω–∞\n"
                    f"üîÑ <b>–ê–≤—Ç–æ—Å–º–µ–Ω–∞ –ø–∞—Ä–æ–ª–µ–π:</b> –í–∫–ª—é—á–µ–Ω–∞\n\n"
                    f"üìã –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ..."
                )
                
            elif stat_type == "game_stats":
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–≥—Ä–∞–º
                c.execute("SELECT game, COUNT(*) FROM accounts GROUP BY game ORDER BY COUNT(*) DESC")
                games_data = c.fetchall()
                
                stats_text = "üéÆ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–≥—Ä–∞–º</b>\n\n"
                for game, count in games_data:
                    emoji = get_game_emoji(game)
                    stats_text += f"{emoji} <b>{game}:</b> {count} –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
                
                if not games_data:
                    stats_text += "üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∏–≥—Ä–∞–º"
                    
            elif stat_type == "popular_accounts":
                # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã (–ø–æ –∏–≥—Ä—è–º)
                c.execute("SELECT game, COUNT(*) as cnt FROM accounts GROUP BY game ORDER BY cnt DESC LIMIT 5")
                popular_games = c.fetchall()
                
                stats_text = "üìä <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n"
                for i, (game, count) in enumerate(popular_games, 1):
                    emoji = get_game_emoji(game)
                    medal = ["ü•á", "ü•à", "ü•â", "4Ô∏è‚É£", "5Ô∏è‚É£"][i-1] if i <= 5 else "üî∏"
                    stats_text += f"{medal} {emoji} <b>{game}:</b> {count} –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
                
                if not popular_games:
                    stats_text += "üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                    
            else:  # financial_stats
                stats_text = (
                    "üí∞ <b>–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–≤–æ–¥–∫–∞</b>\n\n"
                    "üí° <b>–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b>\n\n"
                    "üìä –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è:\n"
                    "‚Ä¢ –î–æ—Ö–æ–¥—ã –æ—Ç –∞—Ä–µ–Ω–¥—ã\n"
                    "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π\n"
                    "‚Ä¢ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã\n"
                    "‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã"
                )
            
            conn.close()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ {stat_type}: {e}")
            stats_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ {stat_type}"
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton("üîô –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="stats"))
        kb.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
        
        safe_edit_message_text(bot, call.message.chat.id, call.message.message_id, 
                               stats_text, kb, parse_mode="HTML")

    @bot.callback_query_handler(func=lambda c: c.data in ["notification_settings", "auto_end_settings", "security_settings", "backup_settings"])
    @auth_required
    def cb_settings_category(call):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        bot.answer_callback_query(call.id)
        
        setting_type = call.data
        
        if setting_type == "notification_settings":
            settings_text = (
                "üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
                "üì¨ <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
                "‚Ä¢ ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö\n"
                "‚Ä¢ ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª–µ–π\n"
                "‚Ä¢ ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö\n"
                "‚Ä¢ ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞—Ä–µ–Ω–¥—ã\n\n"
                "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b>"
            )
            
        elif setting_type == "auto_end_settings":
            settings_text = (
                "‚è∞ <b>–ê–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã</b>\n\n"
                "üîß <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
                "‚Ä¢ ‚úÖ –ê–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ\n"
                "‚Ä¢ ‚úÖ –ê–≤—Ç–æ—Å–º–µ–Ω–∞ –ø–∞—Ä–æ–ª–µ–π –≤–∫–ª—é—á–µ–Ω–∞\n"
                "‚Ä¢ ‚è±Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è\n"
                "‚Ä¢ üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ\n\n"
                "üí° <b>–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</b>"
            )
            
        elif setting_type == "security_settings":
            settings_text = (
                "üîê <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</b>\n\n"
                "üõ°Ô∏è <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Ä—ã –∑–∞—â–∏—Ç—ã:</b>\n"
                "‚Ä¢ ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ Telegram ID\n"
                "‚Ä¢ ‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π\n"
                "‚Ä¢ ‚úÖ –ó–∞—â–∏—â–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π\n"
                "‚Ä¢ ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –ø—Ä–æ—Ü–µ—Å—Å–æ–≤\n\n"
                "üîí <b>–°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–Ω–∞</b>"
            )
            
        else:  # backup_settings
            settings_text = (
                "üíæ <b>–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ</b>\n\n"
                "üìÅ <b>–ß—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è:</b>\n"
                "‚Ä¢ üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
                "‚Ä¢ üìä –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã\n"
                "‚Ä¢ üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç—ã –ø—Ä–æ—Ü–µ—Å—Å–æ–≤\n"
                "‚Ä¢ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n\n"
                "üîÑ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b>"
            )
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton("üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="settings"))
        kb.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
        
        safe_edit_message_text(bot, call.message.chat.id, call.message.message_id, 
                               settings_text, kb, parse_mode="HTML")

    @bot.callback_query_handler(func=lambda c: c.data == "noop")
    def cb_noop(call):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã)"""
        bot.answer_callback_query(call.id, "‚ÑπÔ∏è –≠—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞", show_alert=False)

# next update